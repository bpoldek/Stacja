
Stacja_pogoda.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000624c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006988  08006988  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006988  08006988  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006988  08006988  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08006a00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08006a00  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150a4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d28  00000000  00000000  00035144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00037e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00038de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba7d  00000000  00000000  00039bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013faf  00000000  00000000  00065675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010970b  00000000  00000000  00079624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00182d2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004090  00000000  00000000  00182d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080063e0 	.word	0x080063e0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	080063e0 	.word	0x080063e0

080001ec <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80001ec:	b590      	push	{r4, r7, lr}
 80001ee:	b087      	sub	sp, #28
 80001f0:	af02      	add	r7, sp, #8
 80001f2:	4604      	mov	r4, r0
 80001f4:	4608      	mov	r0, r1
 80001f6:	4611      	mov	r1, r2
 80001f8:	461a      	mov	r2, r3
 80001fa:	4623      	mov	r3, r4
 80001fc:	80fb      	strh	r3, [r7, #6]
 80001fe:	4603      	mov	r3, r0
 8000200:	80bb      	strh	r3, [r7, #4]
 8000202:	460b      	mov	r3, r1
 8000204:	70fb      	strb	r3, [r7, #3]
 8000206:	4613      	mov	r3, r2
 8000208:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 800020a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800020e:	2b7f      	cmp	r3, #127	; 0x7f
 8000210:	f300 8100 	bgt.w	8000414 <GFX_draw_char+0x228>
 8000214:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000218:	2b3f      	cmp	r3, #63	; 0x3f
 800021a:	f300 80fb 	bgt.w	8000414 <GFX_draw_char+0x228>
 800021e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000222:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000226:	4613      	mov	r3, r2
 8000228:	005b      	lsls	r3, r3, #1
 800022a:	4413      	add	r3, r2
 800022c:	005b      	lsls	r3, r3, #1
 800022e:	440b      	add	r3, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	f340 80ef 	ble.w	8000414 <GFX_draw_char+0x228>
 8000236:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800023a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800023e:	00db      	lsls	r3, r3, #3
 8000240:	4413      	add	r3, r2
 8000242:	2b00      	cmp	r3, #0
 8000244:	f340 80e6 	ble.w	8000414 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000248:	2300      	movs	r3, #0
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e0aa      	b.n	80003a4 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 800024e:	78fa      	ldrb	r2, [r7, #3]
 8000250:	4613      	mov	r3, r2
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	441a      	add	r2, r3
 8000256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800025a:	4413      	add	r3, r2
 800025c:	4a6f      	ldr	r2, [pc, #444]	; (800041c <GFX_draw_char+0x230>)
 800025e:	5cd3      	ldrb	r3, [r2, r3]
 8000260:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000262:	2307      	movs	r3, #7
 8000264:	73bb      	strb	r3, [r7, #14]
 8000266:	e092      	b.n	800038e <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000268:	7b7b      	ldrb	r3, [r7, #13]
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d040      	beq.n	80002f4 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000272:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000276:	2b01      	cmp	r3, #1
 8000278:	d116      	bne.n	80002a8 <GFX_draw_char+0xbc>
 800027a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800027e:	2b01      	cmp	r3, #1
 8000280:	d112      	bne.n	80002a8 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000286:	b29a      	uxth	r2, r3
 8000288:	88fb      	ldrh	r3, [r7, #6]
 800028a:	4413      	add	r3, r2
 800028c:	b29b      	uxth	r3, r3
 800028e:	b218      	sxth	r0, r3
 8000290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000294:	b29a      	uxth	r2, r3
 8000296:	88bb      	ldrh	r3, [r7, #4]
 8000298:	4413      	add	r3, r2
 800029a:	b29b      	uxth	r3, r3
 800029c:	b21b      	sxth	r3, r3
 800029e:	883a      	ldrh	r2, [r7, #0]
 80002a0:	4619      	mov	r1, r3
 80002a2:	f000 f9f7 	bl	8000694 <SSD1306_draw_pixel>
 80002a6:	e069      	b.n	800037c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 80002a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002ac:	b29a      	uxth	r2, r3
 80002ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80002b2:	b29b      	uxth	r3, r3
 80002b4:	fb12 f303 	smulbb	r3, r2, r3
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	88fb      	ldrh	r3, [r7, #6]
 80002bc:	4413      	add	r3, r2
 80002be:	b29b      	uxth	r3, r3
 80002c0:	b218      	sxth	r0, r3
 80002c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80002c6:	b29a      	uxth	r2, r3
 80002c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	fb12 f303 	smulbb	r3, r2, r3
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	88bb      	ldrh	r3, [r7, #4]
 80002d6:	4413      	add	r3, r2
 80002d8:	b29b      	uxth	r3, r3
 80002da:	b219      	sxth	r1, r3
 80002dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80002e0:	b21a      	sxth	r2, r3
 80002e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80002e6:	b21c      	sxth	r4, r3
 80002e8:	883b      	ldrh	r3, [r7, #0]
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	4623      	mov	r3, r4
 80002ee:	f000 f8d0 	bl	8000492 <GFX_draw_fill_rect>
 80002f2:	e043      	b.n	800037c <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 80002f4:	8c3a      	ldrh	r2, [r7, #32]
 80002f6:	883b      	ldrh	r3, [r7, #0]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d03f      	beq.n	800037c <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 80002fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000300:	2b01      	cmp	r3, #1
 8000302:	d116      	bne.n	8000332 <GFX_draw_char+0x146>
 8000304:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000308:	2b01      	cmp	r3, #1
 800030a:	d112      	bne.n	8000332 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 800030c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000310:	b29a      	uxth	r2, r3
 8000312:	88fb      	ldrh	r3, [r7, #6]
 8000314:	4413      	add	r3, r2
 8000316:	b29b      	uxth	r3, r3
 8000318:	b218      	sxth	r0, r3
 800031a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800031e:	b29a      	uxth	r2, r3
 8000320:	88bb      	ldrh	r3, [r7, #4]
 8000322:	4413      	add	r3, r2
 8000324:	b29b      	uxth	r3, r3
 8000326:	b21b      	sxth	r3, r3
 8000328:	8c3a      	ldrh	r2, [r7, #32]
 800032a:	4619      	mov	r1, r3
 800032c:	f000 f9b2 	bl	8000694 <SSD1306_draw_pixel>
 8000330:	e024      	b.n	800037c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8000332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000336:	b29a      	uxth	r2, r3
 8000338:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800033c:	b29b      	uxth	r3, r3
 800033e:	fb12 f303 	smulbb	r3, r2, r3
 8000342:	b29a      	uxth	r2, r3
 8000344:	88fb      	ldrh	r3, [r7, #6]
 8000346:	4413      	add	r3, r2
 8000348:	b29b      	uxth	r3, r3
 800034a:	b218      	sxth	r0, r3
 800034c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000350:	b29a      	uxth	r2, r3
 8000352:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000356:	b29b      	uxth	r3, r3
 8000358:	fb12 f303 	smulbb	r3, r2, r3
 800035c:	b29a      	uxth	r2, r3
 800035e:	88bb      	ldrh	r3, [r7, #4]
 8000360:	4413      	add	r3, r2
 8000362:	b29b      	uxth	r3, r3
 8000364:	b219      	sxth	r1, r3
 8000366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800036a:	b21a      	sxth	r2, r3
 800036c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000370:	b21c      	sxth	r4, r3
 8000372:	8c3b      	ldrh	r3, [r7, #32]
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	4623      	mov	r3, r4
 8000378:	f000 f88b 	bl	8000492 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 800037c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000380:	b2db      	uxtb	r3, r3
 8000382:	3b01      	subs	r3, #1
 8000384:	b2db      	uxtb	r3, r3
 8000386:	73bb      	strb	r3, [r7, #14]
 8000388:	7b7b      	ldrb	r3, [r7, #13]
 800038a:	085b      	lsrs	r3, r3, #1
 800038c:	737b      	strb	r3, [r7, #13]
 800038e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000392:	2b00      	cmp	r3, #0
 8000394:	f6bf af68 	bge.w	8000268 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	3301      	adds	r3, #1
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	73fb      	strb	r3, [r7, #15]
 80003a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003a8:	2b04      	cmp	r3, #4
 80003aa:	f77f af50 	ble.w	800024e <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 80003ae:	8c3a      	ldrh	r2, [r7, #32]
 80003b0:	883b      	ldrh	r3, [r7, #0]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d02f      	beq.n	8000416 <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 80003b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d10e      	bne.n	80003dc <GFX_draw_char+0x1f0>
 80003be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d10a      	bne.n	80003dc <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 80003c6:	88fb      	ldrh	r3, [r7, #6]
 80003c8:	3305      	adds	r3, #5
 80003ca:	b29b      	uxth	r3, r3
 80003cc:	b218      	sxth	r0, r3
 80003ce:	8c3b      	ldrh	r3, [r7, #32]
 80003d0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80003d4:	2208      	movs	r2, #8
 80003d6:	f000 fad7 	bl	8000988 <SSD1306_draw_fast_vline>
 80003da:	e01c      	b.n	8000416 <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80003dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	461a      	mov	r2, r3
 80003e4:	0092      	lsls	r2, r2, #2
 80003e6:	4413      	add	r3, r2
 80003e8:	b29a      	uxth	r2, r3
 80003ea:	88fb      	ldrh	r3, [r7, #6]
 80003ec:	4413      	add	r3, r2
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	b218      	sxth	r0, r3
 80003f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003f6:	b21a      	sxth	r2, r3
 80003f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	b29b      	uxth	r3, r3
 8000402:	b21c      	sxth	r4, r3
 8000404:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000408:	8c3b      	ldrh	r3, [r7, #32]
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	4623      	mov	r3, r4
 800040e:	f000 f840 	bl	8000492 <GFX_draw_fill_rect>
 8000412:	e000      	b.n	8000416 <GFX_draw_char+0x22a>
		return;
 8000414:	bf00      	nop
		}
	}
}
 8000416:	3714      	adds	r7, #20
 8000418:	46bd      	mov	sp, r7
 800041a:	bd90      	pop	{r4, r7, pc}
 800041c:	08006438 	.word	0x08006438

08000420 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b08b      	sub	sp, #44	; 0x2c
 8000424:	af04      	add	r7, sp, #16
 8000426:	60ba      	str	r2, [r7, #8]
 8000428:	461a      	mov	r2, r3
 800042a:	4603      	mov	r3, r0
 800042c:	81fb      	strh	r3, [r7, #14]
 800042e:	460b      	mov	r3, r1
 8000430:	81bb      	strh	r3, [r7, #12]
 8000432:	4613      	mov	r3, r2
 8000434:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	75fb      	strb	r3, [r7, #23]
	while(*c)
 800043a:	e021      	b.n	8000480 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 800043c:	7dfb      	ldrb	r3, [r7, #23]
 800043e:	b29a      	uxth	r2, r3
 8000440:	89fb      	ldrh	r3, [r7, #14]
 8000442:	4413      	add	r3, r2
 8000444:	b29b      	uxth	r3, r3
 8000446:	b218      	sxth	r0, r3
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	781a      	ldrb	r2, [r3, #0]
 800044c:	88fc      	ldrh	r4, [r7, #6]
 800044e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000452:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000456:	9302      	str	r3, [sp, #8]
 8000458:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800045c:	9301      	str	r3, [sp, #4]
 800045e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	4623      	mov	r3, r4
 8000464:	f7ff fec2 	bl	80001ec <GFX_draw_char>
		offset += (5 + 2) * size_x;
 8000468:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800046c:	461a      	mov	r2, r3
 800046e:	00d2      	lsls	r2, r2, #3
 8000470:	1ad3      	subs	r3, r2, r3
 8000472:	b2da      	uxtb	r2, r3
 8000474:	7dfb      	ldrb	r3, [r7, #23]
 8000476:	4413      	add	r3, r2
 8000478:	75fb      	strb	r3, [r7, #23]
		c++;
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	3301      	adds	r3, #1
 800047e:	60bb      	str	r3, [r7, #8]
	while(*c)
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1d9      	bne.n	800043c <GFX_draw_string+0x1c>
	}
}
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	371c      	adds	r7, #28
 800048e:	46bd      	mov	sp, r7
 8000490:	bd90      	pop	{r4, r7, pc}

08000492 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000492:	b590      	push	{r4, r7, lr}
 8000494:	b085      	sub	sp, #20
 8000496:	af00      	add	r7, sp, #0
 8000498:	4604      	mov	r4, r0
 800049a:	4608      	mov	r0, r1
 800049c:	4611      	mov	r1, r2
 800049e:	461a      	mov	r2, r3
 80004a0:	4623      	mov	r3, r4
 80004a2:	80fb      	strh	r3, [r7, #6]
 80004a4:	4603      	mov	r3, r0
 80004a6:	80bb      	strh	r3, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	807b      	strh	r3, [r7, #2]
 80004ac:	4613      	mov	r3, r2
 80004ae:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 80004b0:	88fb      	ldrh	r3, [r7, #6]
 80004b2:	81fb      	strh	r3, [r7, #14]
 80004b4:	e00e      	b.n	80004d4 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 80004b6:	8c3b      	ldrh	r3, [r7, #32]
 80004b8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80004bc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80004c0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80004c4:	f000 fa60 	bl	8000988 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 80004c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	3301      	adds	r3, #1
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	81fb      	strh	r3, [r7, #14]
 80004d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80004d8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80004dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004e0:	440b      	add	r3, r1
 80004e2:	429a      	cmp	r2, r3
 80004e4:	dbe7      	blt.n	80004b6 <GFX_draw_fill_rect+0x24>
	}
}
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd90      	pop	{r4, r7, pc}

080004f0 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af04      	add	r7, sp, #16
 80004f6:	4603      	mov	r3, r0
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	b29a      	uxth	r2, r3
 8000504:	2364      	movs	r3, #100	; 0x64
 8000506:	9302      	str	r3, [sp, #8]
 8000508:	88bb      	ldrh	r3, [r7, #4]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2301      	movs	r3, #1
 8000512:	2178      	movs	r1, #120	; 0x78
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <platform_write+0x34>)
 8000516:	f002 fe39 	bl	800318c <HAL_I2C_Mem_Write>
	return 0;
 800051a:	2300      	movs	r3, #0
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000150 	.word	0x20000150

08000528 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af02      	add	r7, sp, #8
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	b29a      	uxth	r2, r3
 800053c:	88bb      	ldrh	r3, [r7, #4]
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2301      	movs	r3, #1
 8000546:	2178      	movs	r1, #120	; 0x78
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <platform_write_dma+0x30>)
 800054a:	f002 ff33 	bl	80033b4 <HAL_I2C_Mem_Write_DMA>
	return 0;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000150 	.word	0x20000150

0800055c <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	2201      	movs	r2, #1
 800056a:	4619      	mov	r1, r3
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff ffbf 	bl	80004f0 <platform_write>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <SSD1306_init>:

bool SSD1306_init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8000582:	2302      	movs	r3, #2
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	238f      	movs	r3, #143	; 0x8f
 8000588:	71bb      	strb	r3, [r7, #6]
 800058a:	2302      	movs	r3, #2
 800058c:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 800058e:	4b40      	ldr	r3, [pc, #256]	; (8000690 <SSD1306_init+0x114>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d10d      	bne.n	80005b2 <SSD1306_init+0x36>
 8000596:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800059a:	f005 fe99 	bl	80062d0 <malloc>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b3b      	ldr	r3, [pc, #236]	; (8000690 <SSD1306_init+0x114>)
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <SSD1306_init+0x114>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <SSD1306_init+0x36>
  {
    return false;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e06a      	b.n	8000688 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 80005b2:	f000 f949 	bl	8000848 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 80005b6:	20ae      	movs	r0, #174	; 0xae
 80005b8:	f7ff ffd0 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 80005bc:	20d5      	movs	r0, #213	; 0xd5
 80005be:	f7ff ffcd 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 80005c2:	20e0      	movs	r0, #224	; 0xe0
 80005c4:	f7ff ffca 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 80005c8:	20a8      	movs	r0, #168	; 0xa8
 80005ca:	f7ff ffc7 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 80005ce:	203f      	movs	r0, #63	; 0x3f
 80005d0:	f7ff ffc4 	bl	800055c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 80005d4:	20d3      	movs	r0, #211	; 0xd3
 80005d6:	f7ff ffc1 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80005da:	2000      	movs	r0, #0
 80005dc:	f7ff ffbe 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80005e0:	2040      	movs	r0, #64	; 0x40
 80005e2:	f7ff ffbb 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80005e6:	208d      	movs	r0, #141	; 0x8d
 80005e8:	f7ff ffb8 	bl	800055c <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80005ec:	797b      	ldrb	r3, [r7, #5]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d101      	bne.n	80005f6 <SSD1306_init+0x7a>
 80005f2:	2310      	movs	r3, #16
 80005f4:	e000      	b.n	80005f8 <SSD1306_init+0x7c>
 80005f6:	2314      	movs	r3, #20
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffaf 	bl	800055c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80005fe:	2020      	movs	r0, #32
 8000600:	f7ff ffac 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff ffa9 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 800060a:	20b0      	movs	r0, #176	; 0xb0
 800060c:	f7ff ffa6 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 8000610:	20c8      	movs	r0, #200	; 0xc8
 8000612:	f7ff ffa3 	bl	800055c <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 8000616:	2312      	movs	r3, #18
 8000618:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 800061a:	797b      	ldrb	r3, [r7, #5]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d101      	bne.n	8000624 <SSD1306_init+0xa8>
 8000620:	239f      	movs	r3, #159	; 0x9f
 8000622:	e000      	b.n	8000626 <SSD1306_init+0xaa>
 8000624:	23cf      	movs	r3, #207	; 0xcf
 8000626:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 8000628:	20da      	movs	r0, #218	; 0xda
 800062a:	f7ff ff97 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(comPins);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff93 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 8000636:	2081      	movs	r0, #129	; 0x81
 8000638:	f7ff ff90 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(contrast);
 800063c:	79bb      	ldrb	r3, [r7, #6]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff8c 	bl	800055c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8000644:	20d9      	movs	r0, #217	; 0xd9
 8000646:	f7ff ff89 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 800064a:	797b      	ldrb	r3, [r7, #5]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d101      	bne.n	8000654 <SSD1306_init+0xd8>
 8000650:	2322      	movs	r3, #34	; 0x22
 8000652:	e000      	b.n	8000656 <SSD1306_init+0xda>
 8000654:	23f1      	movs	r3, #241	; 0xf1
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff80 	bl	800055c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 800065c:	20db      	movs	r0, #219	; 0xdb
 800065e:	f7ff ff7d 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8000662:	2040      	movs	r0, #64	; 0x40
 8000664:	f7ff ff7a 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8000668:	20a4      	movs	r0, #164	; 0xa4
 800066a:	f7ff ff77 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 800066e:	20a6      	movs	r0, #166	; 0xa6
 8000670:	f7ff ff74 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8000674:	202e      	movs	r0, #46	; 0x2e
 8000676:	f7ff ff71 	bl	800055c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 800067a:	20af      	movs	r0, #175	; 0xaf
 800067c:	f7ff ff6e 	bl	800055c <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8000680:	2002      	movs	r0, #2
 8000682:	f000 fb19 	bl	8000cb8 <SSD1306_set_rotation>
  return true;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000008c 	.word	0x2000008c

08000694 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]
 800069e:	460b      	mov	r3, r1
 80006a0:	80bb      	strh	r3, [r7, #4]
 80006a2:	4613      	mov	r3, r2
 80006a4:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 80006a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f2c0 80c4 	blt.w	8000838 <SSD1306_draw_pixel+0x1a4>
 80006b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b4:	2b7f      	cmp	r3, #127	; 0x7f
 80006b6:	f300 80bf 	bgt.w	8000838 <SSD1306_draw_pixel+0x1a4>
 80006ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	f2c0 80ba 	blt.w	8000838 <SSD1306_draw_pixel+0x1a4>
 80006c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006c8:	2b3f      	cmp	r3, #63	; 0x3f
 80006ca:	f300 80b5 	bgt.w	8000838 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 80006ce:	f000 fb03 	bl	8000cd8 <SSD1306_get_rotation>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d023      	beq.n	8000720 <SSD1306_draw_pixel+0x8c>
 80006d8:	2b03      	cmp	r3, #3
 80006da:	dc33      	bgt.n	8000744 <SSD1306_draw_pixel+0xb0>
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d002      	beq.n	80006e6 <SSD1306_draw_pixel+0x52>
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d012      	beq.n	800070a <SSD1306_draw_pixel+0x76>
 80006e4:	e02e      	b.n	8000744 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 80006e6:	88fa      	ldrh	r2, [r7, #6]
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	4053      	eors	r3, r2
 80006ec:	80fb      	strh	r3, [r7, #6]
 80006ee:	88ba      	ldrh	r2, [r7, #4]
 80006f0:	88fb      	ldrh	r3, [r7, #6]
 80006f2:	4053      	eors	r3, r2
 80006f4:	80bb      	strh	r3, [r7, #4]
 80006f6:	88fa      	ldrh	r2, [r7, #6]
 80006f8:	88bb      	ldrh	r3, [r7, #4]
 80006fa:	4053      	eors	r3, r2
 80006fc:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000704:	b29b      	uxth	r3, r3
 8000706:	80fb      	strh	r3, [r7, #6]
				break;
 8000708:	e01c      	b.n	8000744 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000710:	b29b      	uxth	r3, r3
 8000712:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000714:	88bb      	ldrh	r3, [r7, #4]
 8000716:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800071a:	b29b      	uxth	r3, r3
 800071c:	80bb      	strh	r3, [r7, #4]
				break;
 800071e:	e011      	b.n	8000744 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 8000720:	88fa      	ldrh	r2, [r7, #6]
 8000722:	88bb      	ldrh	r3, [r7, #4]
 8000724:	4053      	eors	r3, r2
 8000726:	80fb      	strh	r3, [r7, #6]
 8000728:	88ba      	ldrh	r2, [r7, #4]
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	4053      	eors	r3, r2
 800072e:	80bb      	strh	r3, [r7, #4]
 8000730:	88fa      	ldrh	r2, [r7, #6]
 8000732:	88bb      	ldrh	r3, [r7, #4]
 8000734:	4053      	eors	r3, r2
 8000736:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000738:	88bb      	ldrh	r3, [r7, #4]
 800073a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800073e:	b29b      	uxth	r3, r3
 8000740:	80bb      	strh	r3, [r7, #4]
				break;
 8000742:	bf00      	nop
		}

		switch (color)
 8000744:	887b      	ldrh	r3, [r7, #2]
 8000746:	2b02      	cmp	r3, #2
 8000748:	d051      	beq.n	80007ee <SSD1306_draw_pixel+0x15a>
 800074a:	2b02      	cmp	r3, #2
 800074c:	dc75      	bgt.n	800083a <SSD1306_draw_pixel+0x1a6>
 800074e:	2b00      	cmp	r3, #0
 8000750:	d026      	beq.n	80007a0 <SSD1306_draw_pixel+0x10c>
 8000752:	2b01      	cmp	r3, #1
 8000754:	d171      	bne.n	800083a <SSD1306_draw_pixel+0x1a6>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <SSD1306_draw_pixel+0x1b0>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800075e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	da00      	bge.n	8000768 <SSD1306_draw_pixel+0xd4>
 8000766:	3307      	adds	r3, #7
 8000768:	10db      	asrs	r3, r3, #3
 800076a:	b218      	sxth	r0, r3
 800076c:	4603      	mov	r3, r0
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	440b      	add	r3, r1
 8000772:	4413      	add	r3, r2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b25a      	sxtb	r2, r3
 8000778:	88bb      	ldrh	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f303 	lsl.w	r3, r1, r3
 8000784:	b25b      	sxtb	r3, r3
 8000786:	4313      	orrs	r3, r2
 8000788:	b25c      	sxtb	r4, r3
 800078a:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <SSD1306_draw_pixel+0x1b0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000792:	4602      	mov	r2, r0
 8000794:	01d2      	lsls	r2, r2, #7
 8000796:	440a      	add	r2, r1
 8000798:	4413      	add	r3, r2
 800079a:	b2e2      	uxtb	r2, r4
 800079c:	701a      	strb	r2, [r3, #0]
				break;
 800079e:	e04c      	b.n	800083a <SSD1306_draw_pixel+0x1a6>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 80007a0:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SSD1306_draw_pixel+0x1b0>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80007a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	da00      	bge.n	80007b2 <SSD1306_draw_pixel+0x11e>
 80007b0:	3307      	adds	r3, #7
 80007b2:	10db      	asrs	r3, r3, #3
 80007b4:	b218      	sxth	r0, r3
 80007b6:	4603      	mov	r3, r0
 80007b8:	01db      	lsls	r3, r3, #7
 80007ba:	440b      	add	r3, r1
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	88bb      	ldrh	r3, [r7, #4]
 80007c4:	f003 0307 	and.w	r3, r3, #7
 80007c8:	2101      	movs	r1, #1
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	43db      	mvns	r3, r3
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	4013      	ands	r3, r2
 80007d6:	b25c      	sxtb	r4, r3
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <SSD1306_draw_pixel+0x1b0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80007e0:	4602      	mov	r2, r0
 80007e2:	01d2      	lsls	r2, r2, #7
 80007e4:	440a      	add	r2, r1
 80007e6:	4413      	add	r3, r2
 80007e8:	b2e2      	uxtb	r2, r4
 80007ea:	701a      	strb	r2, [r3, #0]
				break;
 80007ec:	e025      	b.n	800083a <SSD1306_draw_pixel+0x1a6>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <SSD1306_draw_pixel+0x1b0>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80007f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da00      	bge.n	8000800 <SSD1306_draw_pixel+0x16c>
 80007fe:	3307      	adds	r3, #7
 8000800:	10db      	asrs	r3, r3, #3
 8000802:	b218      	sxth	r0, r3
 8000804:	4603      	mov	r3, r0
 8000806:	01db      	lsls	r3, r3, #7
 8000808:	440b      	add	r3, r1
 800080a:	4413      	add	r3, r2
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b25a      	sxtb	r2, r3
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	2101      	movs	r1, #1
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	b25b      	sxtb	r3, r3
 800081e:	4053      	eors	r3, r2
 8000820:	b25c      	sxtb	r4, r3
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <SSD1306_draw_pixel+0x1b0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800082a:	4602      	mov	r2, r0
 800082c:	01d2      	lsls	r2, r2, #7
 800082e:	440a      	add	r2, r1
 8000830:	4413      	add	r3, r2
 8000832:	b2e2      	uxtb	r2, r4
 8000834:	701a      	strb	r2, [r3, #0]
				break;
 8000836:	e000      	b.n	800083a <SSD1306_draw_pixel+0x1a6>
		}
	}
 8000838:	bf00      	nop
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	bf00      	nop
 8000844:	2000008c 	.word	0x2000008c

08000848 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <SSD1306_display_clear+0x18>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f005 fd42 	bl	80062e0 <memset>
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000008c 	.word	0x2000008c

08000864 <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000864:	b490      	push	{r4, r7}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	4604      	mov	r4, r0
 800086c:	4608      	mov	r0, r1
 800086e:	4611      	mov	r1, r2
 8000870:	461a      	mov	r2, r3
 8000872:	4623      	mov	r3, r4
 8000874:	80fb      	strh	r3, [r7, #6]
 8000876:	4603      	mov	r3, r0
 8000878:	80bb      	strh	r3, [r7, #4]
 800087a:	460b      	mov	r3, r1
 800087c:	807b      	strh	r3, [r7, #2]
 800087e:	4613      	mov	r3, r2
 8000880:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8000882:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	db75      	blt.n	8000976 <SSD1306_draw_fast_hline_internal+0x112>
 800088a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800088e:	2b3f      	cmp	r3, #63	; 0x3f
 8000890:	dc71      	bgt.n	8000976 <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8000892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000896:	2b00      	cmp	r3, #0
 8000898:	da06      	bge.n	80008a8 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 800089a:	887a      	ldrh	r2, [r7, #2]
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	4413      	add	r3, r2
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	807b      	strh	r3, [r7, #2]
			x = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 80008a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008b0:	4413      	add	r3, r2
 80008b2:	2b80      	cmp	r3, #128	; 0x80
 80008b4:	dd04      	ble.n	80008c0 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80008bc:	b29b      	uxth	r3, r3
 80008be:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 80008c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	dd56      	ble.n	8000976 <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 80008c8:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <SSD1306_draw_fast_hline_internal+0x120>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	da00      	bge.n	80008d6 <SSD1306_draw_fast_hline_internal+0x72>
 80008d4:	3307      	adds	r3, #7
 80008d6:	10db      	asrs	r3, r3, #3
 80008d8:	b21b      	sxth	r3, r3
 80008da:	01d9      	lsls	r1, r3, #7
 80008dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e0:	440b      	add	r3, r1
 80008e2:	4413      	add	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	88bb      	ldrh	r3, [r7, #4]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	2201      	movs	r2, #1
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	72fb      	strb	r3, [r7, #11]
			switch (color)
 80008f4:	883b      	ldrh	r3, [r7, #0]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d034      	beq.n	8000964 <SSD1306_draw_fast_hline_internal+0x100>
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	dc3c      	bgt.n	8000978 <SSD1306_draw_fast_hline_internal+0x114>
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d013      	beq.n	800092a <SSD1306_draw_fast_hline_internal+0xc6>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d138      	bne.n	8000978 <SSD1306_draw_fast_hline_internal+0x114>
			{
				case SSD1306_WHITE:
					while (w--)
 8000906:	e007      	b.n	8000918 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	60fa      	str	r2, [r7, #12]
 800090e:	7819      	ldrb	r1, [r3, #0]
 8000910:	7afa      	ldrb	r2, [r7, #11]
 8000912:	430a      	orrs	r2, r1
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000918:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800091c:	b29a      	uxth	r2, r3
 800091e:	3a01      	subs	r2, #1
 8000920:	b292      	uxth	r2, r2
 8000922:	807a      	strh	r2, [r7, #2]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1ef      	bne.n	8000908 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8000928:	e026      	b.n	8000978 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_BLACK:
					mask = ~mask;
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	43db      	mvns	r3, r3
 800092e:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8000930:	e007      	b.n	8000942 <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	60fa      	str	r2, [r7, #12]
 8000938:	7819      	ldrb	r1, [r3, #0]
 800093a:	7afa      	ldrb	r2, [r7, #11]
 800093c:	400a      	ands	r2, r1
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000942:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000946:	b29a      	uxth	r2, r3
 8000948:	3a01      	subs	r2, #1
 800094a:	b292      	uxth	r2, r2
 800094c:	807a      	strh	r2, [r7, #2]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1ef      	bne.n	8000932 <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 8000952:	e011      	b.n	8000978 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	60fa      	str	r2, [r7, #12]
 800095a:	7819      	ldrb	r1, [r3, #0]
 800095c:	7afa      	ldrb	r2, [r7, #11]
 800095e:	404a      	eors	r2, r1
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000964:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000968:	b29a      	uxth	r2, r3
 800096a:	3a01      	subs	r2, #1
 800096c:	b292      	uxth	r2, r2
 800096e:	807a      	strh	r2, [r7, #2]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1ef      	bne.n	8000954 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8000974:	e000      	b.n	8000978 <SSD1306_draw_fast_hline_internal+0x114>
			}
		}
 8000976:	bf00      	nop
	}
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bc90      	pop	{r4, r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	2000008c 	.word	0x2000008c

08000988 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	4604      	mov	r4, r0
 8000990:	4608      	mov	r0, r1
 8000992:	4611      	mov	r1, r2
 8000994:	461a      	mov	r2, r3
 8000996:	4623      	mov	r3, r4
 8000998:	80fb      	strh	r3, [r7, #6]
 800099a:	4603      	mov	r3, r0
 800099c:	80bb      	strh	r3, [r7, #4]
 800099e:	460b      	mov	r3, r1
 80009a0:	807b      	strh	r3, [r7, #2]
 80009a2:	4613      	mov	r3, r2
 80009a4:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 80009aa:	f000 f995 	bl	8000cd8 <SSD1306_get_rotation>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d033      	beq.n	8000a1c <SSD1306_draw_fast_vline+0x94>
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	dc45      	bgt.n	8000a44 <SSD1306_draw_fast_vline+0xbc>
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d002      	beq.n	80009c2 <SSD1306_draw_fast_vline+0x3a>
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d01b      	beq.n	80009f8 <SSD1306_draw_fast_vline+0x70>
 80009c0:	e040      	b.n	8000a44 <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 80009c2:	2301      	movs	r3, #1
 80009c4:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 80009c6:	88fa      	ldrh	r2, [r7, #6]
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	4053      	eors	r3, r2
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	88ba      	ldrh	r2, [r7, #4]
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	4053      	eors	r3, r2
 80009d4:	80bb      	strh	r3, [r7, #4]
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	4053      	eors	r3, r2
 80009dc:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 80009e8:	88fa      	ldrh	r2, [r7, #6]
 80009ea:	887b      	ldrh	r3, [r7, #2]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	3301      	adds	r3, #1
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	80fb      	strh	r3, [r7, #6]
  			break;
 80009f6:	e025      	b.n	8000a44 <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000a02:	88bb      	ldrh	r3, [r7, #4]
 8000a04:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8000a0c:	88ba      	ldrh	r2, [r7, #4]
 8000a0e:	887b      	ldrh	r3, [r7, #2]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	3301      	adds	r3, #1
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000a1a:	e013      	b.n	8000a44 <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8000a20:	88fa      	ldrh	r2, [r7, #6]
 8000a22:	88bb      	ldrh	r3, [r7, #4]
 8000a24:	4053      	eors	r3, r2
 8000a26:	80fb      	strh	r3, [r7, #6]
 8000a28:	88ba      	ldrh	r2, [r7, #4]
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	4053      	eors	r3, r2
 8000a2e:	80bb      	strh	r3, [r7, #4]
 8000a30:	88fa      	ldrh	r2, [r7, #6]
 8000a32:	88bb      	ldrh	r3, [r7, #4]
 8000a34:	4053      	eors	r3, r2
 8000a36:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000a38:	88bb      	ldrh	r3, [r7, #4]
 8000a3a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000a42:	bf00      	nop
	}

	if (bSwap)
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d009      	beq.n	8000a5e <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 8000a4a:	883b      	ldrh	r3, [r7, #0]
 8000a4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a50:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a54:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a58:	f7ff ff04 	bl	8000864 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8000a5c:	e008      	b.n	8000a70 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 8000a5e:	883b      	ldrh	r3, [r7, #0]
 8000a60:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a64:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a68:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a6c:	f000 f804 	bl	8000a78 <SSD1306_draw_fast_vline_internal>
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd90      	pop	{r4, r7, pc}

08000a78 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 8000a78:	b490      	push	{r4, r7}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4604      	mov	r4, r0
 8000a80:	4608      	mov	r0, r1
 8000a82:	4611      	mov	r1, r2
 8000a84:	461a      	mov	r2, r3
 8000a86:	4623      	mov	r3, r4
 8000a88:	80fb      	strh	r3, [r7, #6]
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80bb      	strh	r3, [r7, #4]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	807b      	strh	r3, [r7, #2]
 8000a92:	4613      	mov	r3, r2
 8000a94:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8000a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f2c0 80da 	blt.w	8000c54 <SSD1306_draw_fast_vline_internal+0x1dc>
 8000aa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8000aa6:	f300 80d5 	bgt.w	8000c54 <SSD1306_draw_fast_vline_internal+0x1dc>
	{
		// X coord in bounds?
		if (__y < 0)
 8000aaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	da06      	bge.n	8000ac0 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8000ab2:	887a      	ldrh	r2, [r7, #2]
 8000ab4:	88bb      	ldrh	r3, [r7, #4]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	807b      	strh	r3, [r7, #2]
			__y = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8000ac0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ac4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ac8:	4413      	add	r3, r2
 8000aca:	2b40      	cmp	r3, #64	; 0x40
 8000acc:	dd04      	ble.n	8000ad8 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8000ad8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f340 80b9 	ble.w	8000c54 <SSD1306_draw_fast_vline_internal+0x1dc>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	737b      	strb	r3, [r7, #13]
 8000ae6:	887b      	ldrh	r3, [r7, #2]
 8000ae8:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8000aea:	4b5d      	ldr	r3, [pc, #372]	; (8000c60 <SSD1306_draw_fast_vline_internal+0x1e8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	7b7a      	ldrb	r2, [r7, #13]
 8000af0:	08d2      	lsrs	r2, r2, #3
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	01d1      	lsls	r1, r2, #7
 8000af6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000afa:	440a      	add	r2, r1
 8000afc:	4413      	add	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8000b00:	7b7b      	ldrb	r3, [r7, #13]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d040      	beq.n	8000b90 <SSD1306_draw_fast_vline_internal+0x118>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	f1c3 0308 	rsb	r3, r3, #8
 8000b14:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	4a52      	ldr	r2, [pc, #328]	; (8000c64 <SSD1306_draw_fast_vline_internal+0x1ec>)
 8000b1a:	5cd3      	ldrb	r3, [r2, r3]
 8000b1c:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8000b1e:	7dfa      	ldrb	r2, [r7, #23]
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d20b      	bcs.n	8000b3e <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 8000b26:	7bfa      	ldrb	r2, [r7, #15]
 8000b28:	7dfb      	ldrb	r3, [r7, #23]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	22ff      	movs	r2, #255	; 0xff
 8000b2e:	fa42 f303 	asr.w	r3, r2, r3
 8000b32:	b25a      	sxtb	r2, r3
 8000b34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8000b3e:	883b      	ldrh	r3, [r7, #0]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d01a      	beq.n	8000b7a <SSD1306_draw_fast_vline_internal+0x102>
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	dc20      	bgt.n	8000b8a <SSD1306_draw_fast_vline_internal+0x112>
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d009      	beq.n	8000b60 <SSD1306_draw_fast_vline_internal+0xe8>
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d11c      	bne.n	8000b8a <SSD1306_draw_fast_vline_internal+0x112>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	781a      	ldrb	r2, [r3, #0]
 8000b54:	7bbb      	ldrb	r3, [r7, #14]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	701a      	strb	r2, [r3, #0]
						break;
 8000b5e:	e014      	b.n	8000b8a <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b25a      	sxtb	r2, r3
 8000b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	4013      	ands	r3, r2
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	701a      	strb	r2, [r3, #0]
						break;
 8000b78:	e007      	b.n	8000b8a <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	7bbb      	ldrb	r3, [r7, #14]
 8000b80:	4053      	eors	r3, r2
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	701a      	strb	r2, [r3, #0]
						break;
 8000b88:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	3380      	adds	r3, #128	; 0x80
 8000b8e:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8000b90:	7dfa      	ldrb	r2, [r7, #23]
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d35d      	bcc.n	8000c54 <SSD1306_draw_fast_vline_internal+0x1dc>
			{
				// More to go?
				h -= mod;
 8000b98:	7dfa      	ldrb	r2, [r7, #23]
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
 8000ba2:	2b07      	cmp	r3, #7
 8000ba4:	d925      	bls.n	8000bf2 <SSD1306_draw_fast_vline_internal+0x17a>
				{
					if (color == SSD1306_INVERSE)
 8000ba6:	883b      	ldrh	r3, [r7, #0]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d10f      	bne.n	8000bcc <SSD1306_draw_fast_vline_internal+0x154>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	3380      	adds	r3, #128	; 0x80
 8000bbc:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
 8000bc0:	3b08      	subs	r3, #8
 8000bc2:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	2b07      	cmp	r3, #7
 8000bc8:	d8f0      	bhi.n	8000bac <SSD1306_draw_fast_vline_internal+0x134>
 8000bca:	e012      	b.n	8000bf2 <SSD1306_draw_fast_vline_internal+0x17a>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 8000bcc:	883b      	ldrh	r3, [r7, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SSD1306_draw_fast_vline_internal+0x15e>
 8000bd2:	23ff      	movs	r3, #255	; 0xff
 8000bd4:	e000      	b.n	8000bd8 <SSD1306_draw_fast_vline_internal+0x160>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	7b3a      	ldrb	r2, [r7, #12]
 8000bde:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	3380      	adds	r3, #128	; 0x80
 8000be4:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000be6:	7dfb      	ldrb	r3, [r7, #23]
 8000be8:	3b08      	subs	r3, #8
 8000bea:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000bec:	7dfb      	ldrb	r3, [r7, #23]
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	d8f3      	bhi.n	8000bda <SSD1306_draw_fast_vline_internal+0x162>
					}
				}

				if (h)
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d02d      	beq.n	8000c54 <SSD1306_draw_fast_vline_internal+0x1dc>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <SSD1306_draw_fast_vline_internal+0x1f0>)
 8000c04:	5cd3      	ldrb	r3, [r2, r3]
 8000c06:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8000c08:	883b      	ldrh	r3, [r7, #0]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d01a      	beq.n	8000c44 <SSD1306_draw_fast_vline_internal+0x1cc>
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	dc21      	bgt.n	8000c56 <SSD1306_draw_fast_vline_internal+0x1de>
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d009      	beq.n	8000c2a <SSD1306_draw_fast_vline_internal+0x1b2>
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d11d      	bne.n	8000c56 <SSD1306_draw_fast_vline_internal+0x1de>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	7afb      	ldrb	r3, [r7, #11]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	701a      	strb	r2, [r3, #0]
							break;
 8000c28:	e015      	b.n	8000c56 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b25a      	sxtb	r2, r3
 8000c30:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	4013      	ands	r3, r2
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	701a      	strb	r2, [r3, #0]
							break;
 8000c42:	e008      	b.n	8000c56 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	781a      	ldrb	r2, [r3, #0]
 8000c48:	7afb      	ldrb	r3, [r7, #11]
 8000c4a:	4053      	eors	r3, r2
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	701a      	strb	r2, [r3, #0]
							break;
 8000c52:	e000      	b.n	8000c56 <SSD1306_draw_fast_vline_internal+0x1de>
					}
				}
 8000c54:	bf00      	nop
			}
		} // endif positive height
	}   // endif x in bounds
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc90      	pop	{r4, r7}
 8000c5e:	4770      	bx	lr
 8000c60:	2000008c 	.word	0x2000008c
 8000c64:	08006938 	.word	0x08006938
 8000c68:	08006940 	.word	0x08006940

08000c6c <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8000c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c76:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8000c78:	2022      	movs	r0, #34	; 0x22
 8000c7a:	f7ff fc6f 	bl	800055c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff fc6c 	bl	800055c <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8000c84:	20ff      	movs	r0, #255	; 0xff
 8000c86:	f7ff fc69 	bl	800055c <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8000c8a:	2021      	movs	r0, #33	; 0x21
 8000c8c:	f7ff fc66 	bl	800055c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fc63 	bl	800055c <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8000c96:	207f      	movs	r0, #127	; 0x7f
 8000c98:	f7ff fc60 	bl	800055c <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SSD1306_display_repaint+0x48>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	88fa      	ldrh	r2, [r7, #6]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	2040      	movs	r0, #64	; 0x40
 8000ca6:	f7ff fc3f 	bl	8000528 <platform_write_dma>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000008c 	.word	0x2000008c

08000cb8 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <SSD1306_set_rotation+0x1c>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	7013      	strb	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	20000090 	.word	0x20000090

08000cd8 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
	return rotation;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <SSD1306_get_rotation+0x14>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000090 	.word	0x20000090

08000cf0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d12:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d14:	4a2f      	ldr	r2, [pc, #188]	; (8000dd4 <MX_ADC1_Init+0xe4>)
 8000d16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d18:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d72:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d74:	f000 fe3c 	bl	80019f0 <HAL_ADC_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d7e:	f000 fb05 	bl	800138c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000d8e:	f001 fbbb 	bl	8002508 <HAL_ADCEx_MultiModeConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d98:	f000 faf8 	bl	800138c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da0:	2306      	movs	r3, #6
 8000da2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da8:	237f      	movs	r3, #127	; 0x7f
 8000daa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dac:	2304      	movs	r3, #4
 8000dae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_ADC1_Init+0xe0>)
 8000dba:	f000 ff73 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000dc4:	f000 fae2 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000a0 	.word	0x200000a0
 8000dd4:	50040000 	.word	0x50040000
 8000dd8:	c7520000 	.word	0xc7520000

08000ddc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_ADC_MspInit+0x38>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10b      	bne.n	8000e06 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_ADC_MspInit+0x3c>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <HAL_ADC_MspInit+0x3c>)
 8000df4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <HAL_ADC_MspInit+0x3c>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	50040000 	.word	0x50040000
 8000e18:	40021000 	.word	0x40021000

08000e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_DMA_Init+0x38>)
 8000e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <MX_DMA_Init+0x38>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6493      	str	r3, [r2, #72]	; 0x48
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_DMA_Init+0x38>)
 8000e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2010      	movs	r0, #16
 8000e40:	f001 fced 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000e44:	2010      	movs	r0, #16
 8000e46:	f001 fd06 	bl	8002856 <HAL_NVIC_EnableIRQ>

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	4b5b      	ldr	r3, [pc, #364]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a5a      	ldr	r2, [pc, #360]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b58      	ldr	r3, [pc, #352]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e86:	4b55      	ldr	r3, [pc, #340]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a54      	ldr	r2, [pc, #336]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a4e      	ldr	r2, [pc, #312]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b4c      	ldr	r3, [pc, #304]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000ece:	f003 ff07 	bl	8004ce0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b42      	ldr	r3, [pc, #264]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a41      	ldr	r2, [pc, #260]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <MX_GPIO_Init+0x184>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ef0:	483b      	ldr	r0, [pc, #236]	; (8000fe0 <MX_GPIO_Init+0x188>)
 8000ef2:	f002 f8a3 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2140      	movs	r1, #64	; 0x40
 8000efa:	483a      	ldr	r0, [pc, #232]	; (8000fe4 <MX_GPIO_Init+0x18c>)
 8000efc:	f002 f89e 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f06:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <MX_GPIO_Init+0x190>)
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4835      	ldr	r0, [pc, #212]	; (8000fec <MX_GPIO_Init+0x194>)
 8000f16:	f001 feff 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	482a      	ldr	r0, [pc, #168]	; (8000fe0 <MX_GPIO_Init+0x188>)
 8000f38:	f001 feee 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000f3c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4822      	ldr	r0, [pc, #136]	; (8000fe0 <MX_GPIO_Init+0x188>)
 8000f56:	f001 fedf 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481d      	ldr	r0, [pc, #116]	; (8000fe4 <MX_GPIO_Init+0x18c>)
 8000f6e:	f001 fed3 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f72:	2340      	movs	r3, #64	; 0x40
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4816      	ldr	r0, [pc, #88]	; (8000fe4 <MX_GPIO_Init+0x18c>)
 8000f8a:	f001 fec5 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f8e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <MX_GPIO_Init+0x18c>)
 8000fac:	f001 feb4 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fb0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f001 fea2 	bl	8002d18 <HAL_GPIO_Init>

}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000400 	.word	0x48000400
 8000fe4:	48001800 	.word	0x48001800
 8000fe8:	10110000 	.word	0x10110000
 8000fec:	48000800 	.word	0x48000800

08000ff0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_I2C1_Init+0x74>)
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <MX_I2C1_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_I2C1_Init+0x74>)
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <MX_I2C1_Init+0x7c>)
 8000ffe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_I2C1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_I2C1_Init+0x74>)
 8001008:	2201      	movs	r2, #1
 800100a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_I2C1_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_I2C1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_I2C1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <MX_I2C1_Init+0x74>)
 800102c:	f002 f81e 	bl	800306c <HAL_I2C_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001036:	f000 f9a9 	bl	800138c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800103a:	2100      	movs	r1, #0
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <MX_I2C1_Init+0x74>)
 800103e:	f003 fd53 	bl	8004ae8 <HAL_I2CEx_ConfigAnalogFilter>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001048:	f000 f9a0 	bl	800138c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800104c:	2100      	movs	r1, #0
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_I2C1_Init+0x74>)
 8001050:	f003 fd95 	bl	8004b7e <HAL_I2CEx_ConfigDigitalFilter>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800105a:	f000 f997 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000150 	.word	0x20000150
 8001068:	40005400 	.word	0x40005400
 800106c:	00909beb 	.word	0x00909beb

08001070 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a30      	ldr	r2, [pc, #192]	; (8001150 <HAL_I2C_MspInit+0xe0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d159      	bne.n	8001146 <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HAL_I2C_MspInit+0xe4>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a2f      	ldr	r2, [pc, #188]	; (8001154 <HAL_I2C_MspInit+0xe4>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <HAL_I2C_MspInit+0xe4>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b0:	2312      	movs	r3, #18
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010bc:	2304      	movs	r3, #4
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4824      	ldr	r0, [pc, #144]	; (8001158 <HAL_I2C_MspInit+0xe8>)
 80010c8:	f001 fe26 	bl	8002d18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <HAL_I2C_MspInit+0xe4>)
 80010ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d0:	4a20      	ldr	r2, [pc, #128]	; (8001154 <HAL_I2C_MspInit+0xe4>)
 80010d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d6:	6593      	str	r3, [r2, #88]	; 0x58
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <HAL_I2C_MspInit+0xe4>)
 80010da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_I2C_MspInit+0xec>)
 80010e6:	4a1e      	ldr	r2, [pc, #120]	; (8001160 <HAL_I2C_MspInit+0xf0>)
 80010e8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_I2C_MspInit+0xec>)
 80010ec:	2203      	movs	r2, #3
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <HAL_I2C_MspInit+0xec>)
 80010f2:	2210      	movs	r2, #16
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_I2C_MspInit+0xec>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_I2C_MspInit+0xec>)
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_I2C_MspInit+0xec>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_I2C_MspInit+0xec>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_I2C_MspInit+0xec>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_I2C_MspInit+0xec>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800111a:	4810      	ldr	r0, [pc, #64]	; (800115c <HAL_I2C_MspInit+0xec>)
 800111c:	f001 fbb6 	bl	800288c <HAL_DMA_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_I2C_MspInit+0xba>
    {
      Error_Handler();
 8001126:	f000 f931 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_I2C_MspInit+0xec>)
 800112e:	639a      	str	r2, [r3, #56]	; 0x38
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_I2C_MspInit+0xec>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	201f      	movs	r0, #31
 800113c:	f001 fb6f 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001140:	201f      	movs	r0, #31
 8001142:	f001 fb88 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	; 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40005400 	.word	0x40005400
 8001154:	40021000 	.word	0x40021000
 8001158:	48000400 	.word	0x48000400
 800115c:	20000108 	.word	0x20000108
 8001160:	4002006c 	.word	0x4002006c

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116a:	f000 fa08 	bl	800157e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116e:	f000 f881 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001172:	f7ff fe71 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001176:	f7ff fe51 	bl	8000e1c <MX_DMA_Init>
  MX_I2C1_Init();
 800117a:	f7ff ff39 	bl	8000ff0 <MX_I2C1_Init>
  MX_ADC1_Init();
 800117e:	f7ff fdb7 	bl	8000cf0 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SSD1306_init();
 8001182:	f7ff f9fb 	bl	800057c <SSD1306_init>
  HAL_Delay (2000);
 8001186:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800118a:	f000 fa6d 	bl	8001668 <HAL_Delay>
  GFX_draw_string(0, 56, (unsigned char *)"Osmy", WHITE, BLACK, 1, 1);
 800118e:	2301      	movs	r3, #1
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	2301      	movs	r3, #1
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	4a2d      	ldr	r2, [pc, #180]	; (8001254 <main+0xf0>)
 800119e:	2138      	movs	r1, #56	; 0x38
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff f93d 	bl	8000420 <GFX_draw_string>
  GFX_draw_string(0, 48, (unsigned char *)"Siodmy", WHITE, BLACK, 1, 1);
 80011a6:	2301      	movs	r3, #1
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	2301      	movs	r3, #1
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2300      	movs	r3, #0
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	4a28      	ldr	r2, [pc, #160]	; (8001258 <main+0xf4>)
 80011b6:	2130      	movs	r1, #48	; 0x30
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff f931 	bl	8000420 <GFX_draw_string>
  GFX_draw_string(0, 40, (unsigned char *)"Szosty", WHITE, BLACK, 1, 1);
 80011be:	2301      	movs	r3, #1
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	2300      	movs	r3, #0
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	4a23      	ldr	r2, [pc, #140]	; (800125c <main+0xf8>)
 80011ce:	2128      	movs	r1, #40	; 0x28
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff f925 	bl	8000420 <GFX_draw_string>
  GFX_draw_string(0, 32, (unsigned char *)"Piąty", WHITE, BLACK, 1, 1);
 80011d6:	2301      	movs	r3, #1
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	2301      	movs	r3, #1
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	2300      	movs	r3, #0
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	4a1e      	ldr	r2, [pc, #120]	; (8001260 <main+0xfc>)
 80011e6:	2120      	movs	r1, #32
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff f919 	bl	8000420 <GFX_draw_string>
  GFX_draw_string(0, 24, (unsigned char *)"Czwarty", WHITE, BLACK, 1, 1);
 80011ee:	2301      	movs	r3, #1
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2300      	movs	r3, #0
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	4a19      	ldr	r2, [pc, #100]	; (8001264 <main+0x100>)
 80011fe:	2118      	movs	r1, #24
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff f90d 	bl	8000420 <GFX_draw_string>
  GFX_draw_string(0, 16, (unsigned char *)"Trzeci", WHITE, BLACK, 1, 1);
 8001206:	2301      	movs	r3, #1
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	2301      	movs	r3, #1
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	2300      	movs	r3, #0
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <main+0x104>)
 8001216:	2110      	movs	r1, #16
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff f901 	bl	8000420 <GFX_draw_string>
  GFX_draw_string(0, 8, (unsigned char *)"Drugi", WHITE, BLACK, 1, 1);
 800121e:	2301      	movs	r3, #1
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	2301      	movs	r3, #1
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	2300      	movs	r3, #0
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	4a0f      	ldr	r2, [pc, #60]	; (800126c <main+0x108>)
 800122e:	2108      	movs	r1, #8
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff f8f5 	bl	8000420 <GFX_draw_string>
  GFX_draw_string(0, 0, (unsigned char *)"Pierszy", WHITE, BLACK, 1, 1);
 8001236:	2301      	movs	r3, #1
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	2301      	movs	r3, #1
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	2300      	movs	r3, #0
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <main+0x10c>)
 8001246:	2100      	movs	r1, #0
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff f8e9 	bl	8000420 <GFX_draw_string>

  SSD1306_display_repaint();
 800124e:	f7ff fd0d 	bl	8000c6c <SSD1306_display_repaint>

  while (1)
 8001252:	e7fe      	b.n	8001252 <main+0xee>
 8001254:	080063f8 	.word	0x080063f8
 8001258:	08006400 	.word	0x08006400
 800125c:	08006408 	.word	0x08006408
 8001260:	08006410 	.word	0x08006410
 8001264:	08006418 	.word	0x08006418
 8001268:	08006420 	.word	0x08006420
 800126c:	08006428 	.word	0x08006428
 8001270:	08006430 	.word	0x08006430

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0ba      	sub	sp, #232	; 0xe8
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800127e:	2244      	movs	r2, #68	; 0x44
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f005 f82c 	bl	80062e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	228c      	movs	r2, #140	; 0x8c
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f005 f81e 	bl	80062e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012a4:	2310      	movs	r3, #16
 80012a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012b6:	2360      	movs	r3, #96	; 0x60
 80012b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012c2:	2301      	movs	r3, #1
 80012c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 80012ce:	2328      	movs	r3, #40	; 0x28
 80012d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 fd08 	bl	8004d00 <HAL_RCC_OscConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80012f6:	f000 f849 	bl	800138c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001300:	2303      	movs	r3, #3
 8001302:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800130c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800131a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800131e:	2104      	movs	r1, #4
 8001320:	4618      	mov	r0, r3
 8001322:	f004 f913 	bl	800554c <HAL_RCC_ClockConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800132c:	f000 f82e 	bl	800138c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
 8001330:	f244 0340 	movw	r3, #16448	; 0x4040
 8001334:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001336:	2300      	movs	r3, #0
 8001338:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800133a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800133e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001342:	2301      	movs	r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800134a:	2310      	movs	r3, #16
 800134c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800134e:	2302      	movs	r3, #2
 8001350:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001356:	2302      	movs	r3, #2
 8001358:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800135a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800135e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4618      	mov	r0, r3
 8001364:	f004 fac0 	bl	80058e8 <HAL_RCCEx_PeriphCLKConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800136e:	f000 f80d 	bl	800138c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001372:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001376:	f003 fc5d 	bl	8004c34 <HAL_PWREx_ControlVoltageScaling>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001380:	f000 f804 	bl	800138c <Error_Handler>
  }
}
 8001384:	bf00      	nop
 8001386:	37e8      	adds	r7, #232	; 0xe8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	e7fe      	b.n	8001394 <Error_Handler+0x8>
	...

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_MspInit+0x44>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_MspInit+0x44>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6613      	str	r3, [r2, #96]	; 0x60
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_MspInit+0x44>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_MspInit+0x44>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_MspInit+0x44>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6593      	str	r3, [r2, #88]	; 0x58
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_MspInit+0x44>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142c:	f000 f8fc 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA1_Channel6_IRQHandler+0x10>)
 800143a:	f001 fb80 	bl	8002b3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000108 	.word	0x20000108

08001448 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <I2C1_EV_IRQHandler+0x10>)
 800144e:	f002 f8a7 	bl	80035a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000150 	.word	0x20000150

0800145c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <_sbrk+0x5c>)
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <_sbrk+0x60>)
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <_sbrk+0x64>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <_sbrk+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d207      	bcs.n	800149c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800148c:	f004 fef6 	bl	800627c <__errno>
 8001490:	4603      	mov	r3, r0
 8001492:	220c      	movs	r2, #12
 8001494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e009      	b.n	80014b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_sbrk+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20050000 	.word	0x20050000
 80014bc:	00000400 	.word	0x00000400
 80014c0:	20000094 	.word	0x20000094
 80014c4:	200001b0 	.word	0x200001b0

080014c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <SystemInit+0x5c>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d2:	4a14      	ldr	r2, [pc, #80]	; (8001524 <SystemInit+0x5c>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <SystemInit+0x60>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a11      	ldr	r2, [pc, #68]	; (8001528 <SystemInit+0x60>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <SystemInit+0x60>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <SystemInit+0x60>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <SystemInit+0x60>)
 80014f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <SystemInit+0x60>)
 8001500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001504:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <SystemInit+0x60>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a07      	ldr	r2, [pc, #28]	; (8001528 <SystemInit+0x60>)
 800150c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001510:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SystemInit+0x60>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00
 8001528:	40021000 	.word	0x40021000

0800152c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001530:	f7ff ffca 	bl	80014c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001534:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001536:	e003      	b.n	8001540 <LoopCopyDataInit>

08001538 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800153a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800153c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800153e:	3104      	adds	r1, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001540:	480a      	ldr	r0, [pc, #40]	; (800156c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001544:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001546:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001548:	d3f6      	bcc.n	8001538 <CopyDataInit>
	ldr	r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <LoopForever+0x12>)
	b	LoopFillZerobss
 800154c:	e002      	b.n	8001554 <LoopFillZerobss>

0800154e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800154e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001550:	f842 3b04 	str.w	r3, [r2], #4

08001554 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <LoopForever+0x16>)
	cmp	r2, r3
 8001556:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001558:	d3f9      	bcc.n	800154e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155a:	f004 fe95 	bl	8006288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800155e:	f7ff fe01 	bl	8001164 <main>

08001562 <LoopForever>:

LoopForever:
    b LoopForever
 8001562:	e7fe      	b.n	8001562 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001564:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8001568:	08006990 	.word	0x08006990
	ldr	r0, =_sdata
 800156c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001570:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001574:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001578:	200001b0 	.word	0x200001b0

0800157c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_2_IRQHandler>

0800157e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f001 f93d 	bl	8002808 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158e:	2000      	movs	r0, #0
 8001590:	f000 f80e 	bl	80015b0 <HAL_InitTick>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	71fb      	strb	r3, [r7, #7]
 800159e:	e001      	b.n	80015a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015a0:	f7ff fefa 	bl	8001398 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_InitTick+0x6c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d023      	beq.n	800160c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_InitTick+0x70>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_InitTick+0x6c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 f949 	bl	8002872 <HAL_SYSTICK_Config>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10f      	bne.n	8001606 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d809      	bhi.n	8001600 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f001 f913 	bl	800281e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_InitTick+0x74>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e007      	b.n	8001610 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e004      	b.n	8001610 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e001      	b.n	8001610 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008
 8001620:	20000000 	.word	0x20000000
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008
 800164c:	2000019c 	.word	0x2000019c

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	2000019c 	.word	0x2000019c

08001668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001670:	f7ff ffee 	bl	8001650 <HAL_GetTick>
 8001674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d005      	beq.n	800168e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_Delay+0x44>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168e:	bf00      	nop
 8001690:	f7ff ffde 	bl	8001650 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f7      	bhi.n	8001690 <HAL_Delay+0x28>
  {
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000008 	.word	0x20000008

080016b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	609a      	str	r2, [r3, #8]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	609a      	str	r2, [r3, #8]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3360      	adds	r3, #96	; 0x60
 800172a:	461a      	mov	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <LL_ADC_SetOffset+0x44>)
 800173a:	4013      	ands	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	4313      	orrs	r3, r2
 8001748:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001750:	bf00      	nop
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	03fff000 	.word	0x03fff000

08001760 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3360      	adds	r3, #96	; 0x60
 800176e:	461a      	mov	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3360      	adds	r3, #96	; 0x60
 800179c:	461a      	mov	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	431a      	orrs	r2, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017b6:	bf00      	nop
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	615a      	str	r2, [r3, #20]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3330      	adds	r3, #48	; 0x30
 80017f8:	461a      	mov	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	4413      	add	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	211f      	movs	r1, #31
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	0e9b      	lsrs	r3, r3, #26
 8001820:	f003 011f 	and.w	r1, r3, #31
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	431a      	orrs	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001834:	bf00      	nop
 8001836:	371c      	adds	r7, #28
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3314      	adds	r3, #20
 8001850:	461a      	mov	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	0e5b      	lsrs	r3, r3, #25
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	4413      	add	r3, r2
 800185e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	0d1b      	lsrs	r3, r3, #20
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	2107      	movs	r1, #7
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	401a      	ands	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	0d1b      	lsrs	r3, r3, #20
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	431a      	orrs	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800188a:	bf00      	nop
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b0:	43db      	mvns	r3, r3
 80018b2:	401a      	ands	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0318 	and.w	r3, r3, #24
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80018bc:	40d9      	lsrs	r1, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	400b      	ands	r3, r1
 80018c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c6:	431a      	orrs	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	0007ffff 	.word	0x0007ffff

080018e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6093      	str	r3, [r2, #8]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001918:	d101      	bne.n	800191e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800193c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001940:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001968:	d101      	bne.n	800196e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <LL_ADC_IsEnabled+0x18>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <LL_ADC_IsEnabled+0x1a>
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d101      	bne.n	80019ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d101      	bne.n	80019e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e139      	b.n	8001c7e <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff f9df 	bl	8000ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff67 	bl	8001904 <LL_ADC_IsDeepPowerDownEnabled>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d004      	beq.n	8001a46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff4d 	bl	80018e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff82 	bl	8001954 <LL_ADC_IsInternalRegulatorEnabled>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d115      	bne.n	8001a82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff66 	bl	800192c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a60:	4b89      	ldr	r3, [pc, #548]	; (8001c88 <HAL_ADC_Init+0x298>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	4a89      	ldr	r2, [pc, #548]	; (8001c8c <HAL_ADC_Init+0x29c>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	3301      	adds	r3, #1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a74:	e002      	b.n	8001a7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f9      	bne.n	8001a76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff64 	bl	8001954 <LL_ADC_IsInternalRegulatorEnabled>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10d      	bne.n	8001aae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a96:	f043 0210 	orr.w	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff75 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001ab8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 80d2 	bne.w	8001c6c <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 80ce 	bne.w	8001c6c <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ad8:	f043 0202 	orr.w	r2, r3, #2
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff49 	bl	800197c <LL_ADC_IsEnabled>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d115      	bne.n	8001b1c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001af0:	4867      	ldr	r0, [pc, #412]	; (8001c90 <HAL_ADC_Init+0x2a0>)
 8001af2:	f7ff ff43 	bl	800197c <LL_ADC_IsEnabled>
 8001af6:	4604      	mov	r4, r0
 8001af8:	4866      	ldr	r0, [pc, #408]	; (8001c94 <HAL_ADC_Init+0x2a4>)
 8001afa:	f7ff ff3f 	bl	800197c <LL_ADC_IsEnabled>
 8001afe:	4603      	mov	r3, r0
 8001b00:	431c      	orrs	r4, r3
 8001b02:	4865      	ldr	r0, [pc, #404]	; (8001c98 <HAL_ADC_Init+0x2a8>)
 8001b04:	f7ff ff3a 	bl	800197c <LL_ADC_IsEnabled>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4323      	orrs	r3, r4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4861      	ldr	r0, [pc, #388]	; (8001c9c <HAL_ADC_Init+0x2ac>)
 8001b18:	f7ff fdca 	bl	80016b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7e5b      	ldrb	r3, [r3, #25]
 8001b20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b3a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d106      	bne.n	8001b58 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	045b      	lsls	r3, r3, #17
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <HAL_ADC_Init+0x2b0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff08 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001b92:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff15 	bl	80019c8 <LL_ADC_INJ_IsConversionOngoing>
 8001b9e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d140      	bne.n	8001c28 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d13d      	bne.n	8001c28 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7e1b      	ldrb	r3, [r3, #24]
 8001bb4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bb6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bbe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bce:	f023 0306 	bic.w	r3, r3, #6
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	69b9      	ldr	r1, [r7, #24]
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d118      	bne.n	8001c18 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c02:	4311      	orrs	r1, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	611a      	str	r2, [r3, #16]
 8001c16:	e007      	b.n	8001c28 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d10c      	bne.n	8001c4a <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f023 010f 	bic.w	r1, r3, #15
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	1e5a      	subs	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
 8001c48:	e007      	b.n	8001c5a <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 020f 	bic.w	r2, r2, #15
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	f023 0303 	bic.w	r3, r3, #3
 8001c62:	f043 0201 	orr.w	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	659a      	str	r2, [r3, #88]	; 0x58
 8001c6a:	e007      	b.n	8001c7c <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	f043 0210 	orr.w	r2, r3, #16
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	053e2d63 	.word	0x053e2d63
 8001c90:	50040000 	.word	0x50040000
 8001c94:	50040100 	.word	0x50040100
 8001c98:	50040200 	.word	0x50040200
 8001c9c:	50040300 	.word	0x50040300
 8001ca0:	fff0c007 	.word	0xfff0c007

08001ca4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b0b6      	sub	sp, #216	; 0xd8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x22>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e3e3      	b.n	800248e <HAL_ADC_ConfigChannel+0x7ea>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fe65 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f040 83c4 	bne.w	8002468 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d824      	bhi.n	8001d32 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	3b02      	subs	r3, #2
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d81b      	bhi.n	8001d2a <HAL_ADC_ConfigChannel+0x86>
 8001cf2:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <HAL_ADC_ConfigChannel+0x54>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d09 	.word	0x08001d09
 8001cfc:	08001d11 	.word	0x08001d11
 8001d00:	08001d19 	.word	0x08001d19
 8001d04:	08001d21 	.word	0x08001d21
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	605a      	str	r2, [r3, #4]
          break;
 8001d0e:	e011      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2212      	movs	r2, #18
 8001d14:	605a      	str	r2, [r3, #4]
          break;
 8001d16:	e00d      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2218      	movs	r2, #24
 8001d1c:	605a      	str	r2, [r3, #4]
          break;
 8001d1e:	e009      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d26:	605a      	str	r2, [r3, #4]
          break;
 8001d28:	e004      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2206      	movs	r2, #6
 8001d2e:	605a      	str	r2, [r3, #4]
          break;
 8001d30:	e000      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d32:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	f7ff fd51 	bl	80017e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fe29 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001d50:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fe35 	bl	80019c8 <LL_ADC_INJ_IsConversionOngoing>
 8001d5e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 81c1 	bne.w	80020ee <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 81bc 	bne.w	80020ee <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d7e:	d10f      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7ff fd58 	bl	8001840 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fd12 	bl	80017c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d9e:	e00e      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6819      	ldr	r1, [r3, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	461a      	mov	r2, r3
 8001dae:	f7ff fd47 	bl	8001840 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fd02 	bl	80017c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d00a      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6919      	ldr	r1, [r3, #16]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001df0:	f7ff fc92 	bl	8001718 <LL_ADC_SetOffset>
 8001df4:	e17b      	b.n	80020ee <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fcaf 	bl	8001760 <LL_ADC_GetOffsetChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10a      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x17e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fca4 	bl	8001760 <LL_ADC_GetOffsetChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	0e9b      	lsrs	r3, r3, #26
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	e01e      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x1bc>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fc99 	bl	8001760 <LL_ADC_GetOffsetChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001e50:	2320      	movs	r3, #32
 8001e52:	e004      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001e54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x1d4>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0e9b      	lsrs	r3, r3, #26
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	e018      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x206>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	e004      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001ea0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d106      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fc68 	bl	800178c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fc4c 	bl	8001760 <LL_ADC_GetOffsetChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10a      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x244>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fc41 	bl	8001760 <LL_ADC_GetOffsetChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	f003 021f 	and.w	r2, r3, #31
 8001ee6:	e01e      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x282>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fc36 	bl	8001760 <LL_ADC_GetOffsetChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001f16:	2320      	movs	r3, #32
 8001f18:	e004      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001f1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x29a>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0e9b      	lsrs	r3, r3, #26
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	e018      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x2cc>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001f62:	2320      	movs	r3, #32
 8001f64:	e004      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001f66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d106      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fc05 	bl	800178c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2102      	movs	r1, #2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fbe9 	bl	8001760 <LL_ADC_GetOffsetChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x30a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fbde 	bl	8001760 <LL_ADC_GetOffsetChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	e01e      	b.n	8001fec <HAL_ADC_ConfigChannel+0x348>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fbd3 	bl	8001760 <LL_ADC_GetOffsetChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	e004      	b.n	8001fea <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001fe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d105      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x360>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0e9b      	lsrs	r3, r3, #26
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	e016      	b.n	8002032 <HAL_ADC_ConfigChannel+0x38e>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002016:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800201c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002024:	2320      	movs	r3, #32
 8002026:	e004      	b.n	8002032 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002032:	429a      	cmp	r2, r3
 8002034:	d106      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	2102      	movs	r1, #2
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fba4 	bl	800178c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2103      	movs	r1, #3
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fb88 	bl	8001760 <LL_ADC_GetOffsetChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x3cc>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2103      	movs	r1, #3
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fb7d 	bl	8001760 <LL_ADC_GetOffsetChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	0e9b      	lsrs	r3, r3, #26
 800206a:	f003 021f 	and.w	r2, r3, #31
 800206e:	e017      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x3fc>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2103      	movs	r1, #3
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fb72 	bl	8001760 <LL_ADC_GetOffsetChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002088:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800208a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800208c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002092:	2320      	movs	r3, #32
 8002094:	e003      	b.n	800209e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x414>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	e011      	b.n	80020dc <HAL_ADC_ConfigChannel+0x438>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80020d0:	2320      	movs	r3, #32
 80020d2:	e003      	b.n	80020dc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80020d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020dc:	429a      	cmp	r2, r3
 80020de:	d106      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2103      	movs	r1, #3
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fb4f 	bl	800178c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fc42 	bl	800197c <LL_ADC_IsEnabled>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 8140 	bne.w	8002380 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	461a      	mov	r2, r3
 800210e:	f7ff fbc3 	bl	8001898 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4a8f      	ldr	r2, [pc, #572]	; (8002354 <HAL_ADC_ConfigChannel+0x6b0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	f040 8131 	bne.w	8002380 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10b      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x4a2>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0e9b      	lsrs	r3, r3, #26
 8002134:	3301      	adds	r3, #1
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	2b09      	cmp	r3, #9
 800213c:	bf94      	ite	ls
 800213e:	2301      	movls	r3, #1
 8002140:	2300      	movhi	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	e019      	b.n	800217a <HAL_ADC_ConfigChannel+0x4d6>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002156:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800215e:	2320      	movs	r3, #32
 8002160:	e003      	b.n	800216a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	2b09      	cmp	r3, #9
 8002172:	bf94      	ite	ls
 8002174:	2301      	movls	r3, #1
 8002176:	2300      	movhi	r3, #0
 8002178:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800217a:	2b00      	cmp	r3, #0
 800217c:	d079      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <HAL_ADC_ConfigChannel+0x4f6>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0e9b      	lsrs	r3, r3, #26
 8002190:	3301      	adds	r3, #1
 8002192:	069b      	lsls	r3, r3, #26
 8002194:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002198:	e015      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x522>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80021b2:	2320      	movs	r3, #32
 80021b4:	e003      	b.n	80021be <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80021b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	069b      	lsls	r3, r3, #26
 80021c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x542>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	0e9b      	lsrs	r3, r3, #26
 80021d8:	3301      	adds	r3, #1
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	e017      	b.n	8002216 <HAL_ADC_ConfigChannel+0x572>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e003      	b.n	800220a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3301      	adds	r3, #1
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	ea42 0103 	orr.w	r1, r2, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10a      	bne.n	800223c <HAL_ADC_ConfigChannel+0x598>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	3301      	adds	r3, #1
 800222e:	f003 021f 	and.w	r2, r3, #31
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	e018      	b.n	800226e <HAL_ADC_ConfigChannel+0x5ca>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800224e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002254:	2320      	movs	r3, #32
 8002256:	e003      	b.n	8002260 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	3301      	adds	r3, #1
 8002262:	f003 021f 	and.w	r2, r3, #31
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800226e:	430b      	orrs	r3, r1
 8002270:	e081      	b.n	8002376 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227a:	2b00      	cmp	r3, #0
 800227c:	d107      	bne.n	800228e <HAL_ADC_ConfigChannel+0x5ea>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0e9b      	lsrs	r3, r3, #26
 8002284:	3301      	adds	r3, #1
 8002286:	069b      	lsls	r3, r3, #26
 8002288:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800228c:	e015      	b.n	80022ba <HAL_ADC_ConfigChannel+0x616>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80022a6:	2320      	movs	r3, #32
 80022a8:	e003      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	069b      	lsls	r3, r3, #26
 80022b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <HAL_ADC_ConfigChannel+0x636>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	0e9b      	lsrs	r3, r3, #26
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	2101      	movs	r1, #1
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	e017      	b.n	800230a <HAL_ADC_ConfigChannel+0x666>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	61fb      	str	r3, [r7, #28]
  return result;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80022f2:	2320      	movs	r3, #32
 80022f4:	e003      	b.n	80022fe <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2101      	movs	r1, #1
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	ea42 0103 	orr.w	r1, r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10d      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x692>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0e9b      	lsrs	r3, r3, #26
 8002320:	3301      	adds	r3, #1
 8002322:	f003 021f 	and.w	r2, r3, #31
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	3b1e      	subs	r3, #30
 800232e:	051b      	lsls	r3, r3, #20
 8002330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002334:	e01e      	b.n	8002374 <HAL_ADC_ConfigChannel+0x6d0>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	613b      	str	r3, [r7, #16]
  return result;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d104      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800234e:	2320      	movs	r3, #32
 8002350:	e006      	b.n	8002360 <HAL_ADC_ConfigChannel+0x6bc>
 8002352:	bf00      	nop
 8002354:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f003 021f 	and.w	r2, r3, #31
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	3b1e      	subs	r3, #30
 800236e:	051b      	lsls	r3, r3, #20
 8002370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002374:	430b      	orrs	r3, r1
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	6892      	ldr	r2, [r2, #8]
 800237a:	4619      	mov	r1, r3
 800237c:	f7ff fa60 	bl	8001840 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b44      	ldr	r3, [pc, #272]	; (8002498 <HAL_ADC_ConfigChannel+0x7f4>)
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d07a      	beq.n	8002482 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800238c:	4843      	ldr	r0, [pc, #268]	; (800249c <HAL_ADC_ConfigChannel+0x7f8>)
 800238e:	f7ff f9b5 	bl	80016fc <LL_ADC_GetCommonPathInternalCh>
 8002392:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a41      	ldr	r2, [pc, #260]	; (80024a0 <HAL_ADC_ConfigChannel+0x7fc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d12c      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d126      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a3c      	ldr	r2, [pc, #240]	; (80024a4 <HAL_ADC_ConfigChannel+0x800>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_ADC_ConfigChannel+0x71c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a3b      	ldr	r2, [pc, #236]	; (80024a8 <HAL_ADC_ConfigChannel+0x804>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d15d      	bne.n	800247c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023c8:	4619      	mov	r1, r3
 80023ca:	4834      	ldr	r0, [pc, #208]	; (800249c <HAL_ADC_ConfigChannel+0x7f8>)
 80023cc:	f7ff f983 	bl	80016d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d0:	4b36      	ldr	r3, [pc, #216]	; (80024ac <HAL_ADC_ConfigChannel+0x808>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	099b      	lsrs	r3, r3, #6
 80023d6:	4a36      	ldr	r2, [pc, #216]	; (80024b0 <HAL_ADC_ConfigChannel+0x80c>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023ea:	e002      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f9      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023f8:	e040      	b.n	800247c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <HAL_ADC_ConfigChannel+0x810>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d118      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x792>
 8002404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d112      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <HAL_ADC_ConfigChannel+0x800>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_ADC_ConfigChannel+0x780>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a22      	ldr	r2, [pc, #136]	; (80024a8 <HAL_ADC_ConfigChannel+0x804>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d12d      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242c:	4619      	mov	r1, r3
 800242e:	481b      	ldr	r0, [pc, #108]	; (800249c <HAL_ADC_ConfigChannel+0x7f8>)
 8002430:	f7ff f951 	bl	80016d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002434:	e024      	b.n	8002480 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_ADC_ConfigChannel+0x814>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d120      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d11a      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <HAL_ADC_ConfigChannel+0x800>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d115      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800245a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800245e:	4619      	mov	r1, r3
 8002460:	480e      	ldr	r0, [pc, #56]	; (800249c <HAL_ADC_ConfigChannel+0x7f8>)
 8002462:	f7ff f938 	bl	80016d6 <LL_ADC_SetCommonPathInternalCh>
 8002466:	e00c      	b.n	8002482 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800247a:	e002      	b.n	8002482 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800247c:	bf00      	nop
 800247e:	e000      	b.n	8002482 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002480:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800248a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800248e:	4618      	mov	r0, r3
 8002490:	37d8      	adds	r7, #216	; 0xd8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	80080000 	.word	0x80080000
 800249c:	50040300 	.word	0x50040300
 80024a0:	c7520000 	.word	0xc7520000
 80024a4:	50040000 	.word	0x50040000
 80024a8:	50040200 	.word	0x50040200
 80024ac:	20000000 	.word	0x20000000
 80024b0:	053e2d63 	.word	0x053e2d63
 80024b4:	cb840000 	.word	0xcb840000
 80024b8:	80000001 	.word	0x80000001

080024bc <LL_ADC_IsEnabled>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <LL_ADC_IsEnabled+0x18>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <LL_ADC_IsEnabled+0x1a>
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d101      	bne.n	80024fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b0a1      	sub	sp, #132	; 0x84
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002522:	2302      	movs	r3, #2
 8002524:	e093      	b.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800252e:	2300      	movs	r3, #0
 8002530:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002532:	2300      	movs	r3, #0
 8002534:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a47      	ldr	r2, [pc, #284]	; (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d102      	bne.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002540:	4b46      	ldr	r3, [pc, #280]	; (800265c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e001      	b.n	800254a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10b      	bne.n	8002568 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e072      	b.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ffb9 	bl	80024e2 <LL_ADC_REG_IsConversionOngoing>
 8002570:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ffb3 	bl	80024e2 <LL_ADC_REG_IsConversionOngoing>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d154      	bne.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002584:	2b00      	cmp	r3, #0
 8002586:	d151      	bne.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002588:	4b35      	ldr	r3, [pc, #212]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800258a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d02c      	beq.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025a6:	035b      	lsls	r3, r3, #13
 80025a8:	430b      	orrs	r3, r1
 80025aa:	431a      	orrs	r2, r3
 80025ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025b0:	4829      	ldr	r0, [pc, #164]	; (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025b2:	f7ff ff83 	bl	80024bc <LL_ADC_IsEnabled>
 80025b6:	4604      	mov	r4, r0
 80025b8:	4828      	ldr	r0, [pc, #160]	; (800265c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025ba:	f7ff ff7f 	bl	80024bc <LL_ADC_IsEnabled>
 80025be:	4603      	mov	r3, r0
 80025c0:	431c      	orrs	r4, r3
 80025c2:	4828      	ldr	r0, [pc, #160]	; (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80025c4:	f7ff ff7a 	bl	80024bc <LL_ADC_IsEnabled>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4323      	orrs	r3, r4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d137      	bne.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025d8:	f023 030f 	bic.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	6811      	ldr	r1, [r2, #0]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	6892      	ldr	r2, [r2, #8]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	431a      	orrs	r2, r3
 80025e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025ec:	e028      	b.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025fa:	4817      	ldr	r0, [pc, #92]	; (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025fc:	f7ff ff5e 	bl	80024bc <LL_ADC_IsEnabled>
 8002600:	4604      	mov	r4, r0
 8002602:	4816      	ldr	r0, [pc, #88]	; (800265c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002604:	f7ff ff5a 	bl	80024bc <LL_ADC_IsEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	431c      	orrs	r4, r3
 800260c:	4815      	ldr	r0, [pc, #84]	; (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800260e:	f7ff ff55 	bl	80024bc <LL_ADC_IsEnabled>
 8002612:	4603      	mov	r3, r0
 8002614:	4323      	orrs	r3, r4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d112      	bne.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800261a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002622:	f023 030f 	bic.w	r3, r3, #15
 8002626:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002628:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800262a:	e009      	b.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	f043 0220 	orr.w	r2, r3, #32
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800263e:	e000      	b.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002640:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800264a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800264e:	4618      	mov	r0, r3
 8002650:	3784      	adds	r7, #132	; 0x84
 8002652:	46bd      	mov	sp, r7
 8002654:	bd90      	pop	{r4, r7, pc}
 8002656:	bf00      	nop
 8002658:	50040000 	.word	0x50040000
 800265c:	50040100 	.word	0x50040100
 8002660:	50040300 	.word	0x50040300
 8002664:	50040200 	.word	0x50040200

08002668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <__NVIC_GetPriorityGrouping+0x18>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 0307 	and.w	r3, r3, #7
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db0b      	blt.n	80026f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <__NVIC_EnableIRQ+0x38>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2001      	movs	r0, #1
 80026ee:	fa00 f202 	lsl.w	r2, r0, r2
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d4:	d301      	bcc.n	80027da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00f      	b.n	80027fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <SysTick_Config+0x40>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e2:	210f      	movs	r1, #15
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f7ff ff8e 	bl	8002708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <SysTick_Config+0x40>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <SysTick_Config+0x40>)
 80027f4:	2207      	movs	r2, #7
 80027f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	e000e010 	.word	0xe000e010

08002808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff29 	bl	8002668 <__NVIC_SetPriorityGrouping>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff3e 	bl	80026b0 <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff8e 	bl	800275c <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff5d 	bl	8002708 <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff31 	bl	80026cc <__NVIC_EnableIRQ>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffa2 	bl	80027c4 <SysTick_Config>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e098      	b.n	80029d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b4d      	ldr	r3, [pc, #308]	; (80029dc <HAL_DMA_Init+0x150>)
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d80f      	bhi.n	80028ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <HAL_DMA_Init+0x154>)
 80028b2:	4413      	add	r3, r2
 80028b4:	4a4b      	ldr	r2, [pc, #300]	; (80029e4 <HAL_DMA_Init+0x158>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	009a      	lsls	r2, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a48      	ldr	r2, [pc, #288]	; (80029e8 <HAL_DMA_Init+0x15c>)
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
 80028c8:	e00e      	b.n	80028e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b46      	ldr	r3, [pc, #280]	; (80029ec <HAL_DMA_Init+0x160>)
 80028d2:	4413      	add	r3, r2
 80028d4:	4a43      	ldr	r2, [pc, #268]	; (80029e4 <HAL_DMA_Init+0x158>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	009a      	lsls	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <HAL_DMA_Init+0x164>)
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002902:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002942:	d039      	beq.n	80029b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	4a27      	ldr	r2, [pc, #156]	; (80029e8 <HAL_DMA_Init+0x15c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d11a      	bne.n	8002984 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800294e:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_DMA_Init+0x168>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	f003 031c 	and.w	r3, r3, #28
 800295a:	210f      	movs	r1, #15
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	4924      	ldr	r1, [pc, #144]	; (80029f4 <HAL_DMA_Init+0x168>)
 8002964:	4013      	ands	r3, r2
 8002966:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_DMA_Init+0x168>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	f003 031c 	and.w	r3, r3, #28
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	491d      	ldr	r1, [pc, #116]	; (80029f4 <HAL_DMA_Init+0x168>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
 8002982:	e019      	b.n	80029b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002984:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_DMA_Init+0x16c>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f003 031c 	and.w	r3, r3, #28
 8002990:	210f      	movs	r1, #15
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	4917      	ldr	r1, [pc, #92]	; (80029f8 <HAL_DMA_Init+0x16c>)
 800299a:	4013      	ands	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_DMA_Init+0x16c>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f003 031c 	and.w	r3, r3, #28
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	4911      	ldr	r1, [pc, #68]	; (80029f8 <HAL_DMA_Init+0x16c>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40020407 	.word	0x40020407
 80029e0:	bffdfff8 	.word	0xbffdfff8
 80029e4:	cccccccd 	.word	0xcccccccd
 80029e8:	40020000 	.word	0x40020000
 80029ec:	bffdfbf8 	.word	0xbffdfbf8
 80029f0:	40020400 	.word	0x40020400
 80029f4:	400200a8 	.word	0x400200a8
 80029f8:	400204a8 	.word	0x400204a8

080029fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_DMA_Start_IT+0x20>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e04b      	b.n	8002ab4 <HAL_DMA_Start_IT+0xb8>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d13a      	bne.n	8002aa6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f92f 	bl	8002cb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 020e 	orr.w	r2, r2, #14
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e00f      	b.n	8002a94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0204 	bic.w	r2, r2, #4
 8002a82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 020a 	orr.w	r2, r2, #10
 8002a92:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e005      	b.n	8002ab2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d005      	beq.n	8002ae0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e029      	b.n	8002b34 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 020e 	bic.w	r2, r2, #14
 8002aee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	f003 021c 	and.w	r2, r3, #28
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
    }
  }
  return status;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f003 031c 	and.w	r3, r3, #28
 8002b5e:	2204      	movs	r2, #4
 8002b60:	409a      	lsls	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d026      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x7a>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d021      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0204 	bic.w	r2, r2, #4
 8002b90:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f003 021c 	and.w	r2, r3, #28
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2104      	movs	r1, #4
 8002ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d071      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002bb6:	e06c      	b.n	8002c92 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	f003 031c 	and.w	r3, r3, #28
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d02e      	beq.n	8002c2a <HAL_DMA_IRQHandler+0xec>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d029      	beq.n	8002c2a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 020a 	bic.w	r2, r2, #10
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f003 021c 	and.w	r2, r3, #28
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	2102      	movs	r1, #2
 8002c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d038      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c28:	e033      	b.n	8002c92 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	f003 031c 	and.w	r3, r3, #28
 8002c32:	2208      	movs	r2, #8
 8002c34:	409a      	lsls	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d02a      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x156>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d025      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 020e 	bic.w	r2, r2, #14
 8002c56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5c:	f003 021c 	and.w	r2, r3, #28
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
}
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002caa:	b2db      	uxtb	r3, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f003 021c 	and.w	r2, r3, #28
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d108      	bne.n	8002cfc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cfa:	e007      	b.n	8002d0c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	60da      	str	r2, [r3, #12]
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d26:	e166      	b.n	8002ff6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8158 	beq.w	8002ff0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d00b      	beq.n	8002d60 <HAL_GPIO_Init+0x48>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d007      	beq.n	8002d60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d54:	2b11      	cmp	r3, #17
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b12      	cmp	r3, #18
 8002d5e:	d130      	bne.n	8002dc2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d96:	2201      	movs	r2, #1
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 0201 	and.w	r2, r3, #1
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0xea>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b12      	cmp	r3, #18
 8002e00:	d123      	bne.n	8002e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	08da      	lsrs	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3208      	adds	r2, #8
 8002e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4013      	ands	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	08da      	lsrs	r2, r3, #3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3208      	adds	r2, #8
 8002e44:	6939      	ldr	r1, [r7, #16]
 8002e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2203      	movs	r2, #3
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0203 	and.w	r2, r3, #3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80b2 	beq.w	8002ff0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8c:	4b61      	ldr	r3, [pc, #388]	; (8003014 <HAL_GPIO_Init+0x2fc>)
 8002e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e90:	4a60      	ldr	r2, [pc, #384]	; (8003014 <HAL_GPIO_Init+0x2fc>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6613      	str	r3, [r2, #96]	; 0x60
 8002e98:	4b5e      	ldr	r3, [pc, #376]	; (8003014 <HAL_GPIO_Init+0x2fc>)
 8002e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ea4:	4a5c      	ldr	r2, [pc, #368]	; (8003018 <HAL_GPIO_Init+0x300>)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	089b      	lsrs	r3, r3, #2
 8002eaa:	3302      	adds	r3, #2
 8002eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	220f      	movs	r2, #15
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ece:	d02b      	beq.n	8002f28 <HAL_GPIO_Init+0x210>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_GPIO_Init+0x304>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d025      	beq.n	8002f24 <HAL_GPIO_Init+0x20c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a51      	ldr	r2, [pc, #324]	; (8003020 <HAL_GPIO_Init+0x308>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d01f      	beq.n	8002f20 <HAL_GPIO_Init+0x208>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a50      	ldr	r2, [pc, #320]	; (8003024 <HAL_GPIO_Init+0x30c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d019      	beq.n	8002f1c <HAL_GPIO_Init+0x204>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a4f      	ldr	r2, [pc, #316]	; (8003028 <HAL_GPIO_Init+0x310>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d013      	beq.n	8002f18 <HAL_GPIO_Init+0x200>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a4e      	ldr	r2, [pc, #312]	; (800302c <HAL_GPIO_Init+0x314>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00d      	beq.n	8002f14 <HAL_GPIO_Init+0x1fc>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a4d      	ldr	r2, [pc, #308]	; (8003030 <HAL_GPIO_Init+0x318>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d007      	beq.n	8002f10 <HAL_GPIO_Init+0x1f8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a4c      	ldr	r2, [pc, #304]	; (8003034 <HAL_GPIO_Init+0x31c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d101      	bne.n	8002f0c <HAL_GPIO_Init+0x1f4>
 8002f08:	2307      	movs	r3, #7
 8002f0a:	e00e      	b.n	8002f2a <HAL_GPIO_Init+0x212>
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	e00c      	b.n	8002f2a <HAL_GPIO_Init+0x212>
 8002f10:	2306      	movs	r3, #6
 8002f12:	e00a      	b.n	8002f2a <HAL_GPIO_Init+0x212>
 8002f14:	2305      	movs	r3, #5
 8002f16:	e008      	b.n	8002f2a <HAL_GPIO_Init+0x212>
 8002f18:	2304      	movs	r3, #4
 8002f1a:	e006      	b.n	8002f2a <HAL_GPIO_Init+0x212>
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e004      	b.n	8002f2a <HAL_GPIO_Init+0x212>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e002      	b.n	8002f2a <HAL_GPIO_Init+0x212>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <HAL_GPIO_Init+0x212>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	f002 0203 	and.w	r2, r2, #3
 8002f30:	0092      	lsls	r2, r2, #2
 8002f32:	4093      	lsls	r3, r2
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f3a:	4937      	ldr	r1, [pc, #220]	; (8003018 <HAL_GPIO_Init+0x300>)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	3302      	adds	r3, #2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f48:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_GPIO_Init+0x320>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f6c:	4a32      	ldr	r2, [pc, #200]	; (8003038 <HAL_GPIO_Init+0x320>)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002f72:	4b31      	ldr	r3, [pc, #196]	; (8003038 <HAL_GPIO_Init+0x320>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f96:	4a28      	ldr	r2, [pc, #160]	; (8003038 <HAL_GPIO_Init+0x320>)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f9c:	4b26      	ldr	r3, [pc, #152]	; (8003038 <HAL_GPIO_Init+0x320>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <HAL_GPIO_Init+0x320>)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_GPIO_Init+0x320>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fea:	4a13      	ldr	r2, [pc, #76]	; (8003038 <HAL_GPIO_Init+0x320>)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	f47f ae91 	bne.w	8002d28 <HAL_GPIO_Init+0x10>
  }
}
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	40021000 	.word	0x40021000
 8003018:	40010000 	.word	0x40010000
 800301c:	48000400 	.word	0x48000400
 8003020:	48000800 	.word	0x48000800
 8003024:	48000c00 	.word	0x48000c00
 8003028:	48001000 	.word	0x48001000
 800302c:	48001400 	.word	0x48001400
 8003030:	48001800 	.word	0x48001800
 8003034:	48001c00 	.word	0x48001c00
 8003038:	40010400 	.word	0x40010400

0800303c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
 8003048:	4613      	mov	r3, r2
 800304a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800304c:	787b      	ldrb	r3, [r7, #1]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003052:	887a      	ldrh	r2, [r7, #2]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003058:	e002      	b.n	8003060 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800305a:	887a      	ldrh	r2, [r7, #2]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e081      	b.n	8003182 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd ffec 	bl	8001070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2224      	movs	r2, #36	; 0x24
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d107      	bne.n	80030e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	e006      	b.n	80030f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d104      	bne.n	8003106 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003104:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003118:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003128:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	ea42 0103 	orr.w	r1, r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	021a      	lsls	r2, r3, #8
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69d9      	ldr	r1, [r3, #28]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1a      	ldr	r2, [r3, #32]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	4608      	mov	r0, r1
 8003196:	4611      	mov	r1, r2
 8003198:	461a      	mov	r2, r3
 800319a:	4603      	mov	r3, r0
 800319c:	817b      	strh	r3, [r7, #10]
 800319e:	460b      	mov	r3, r1
 80031a0:	813b      	strh	r3, [r7, #8]
 80031a2:	4613      	mov	r3, r2
 80031a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	f040 80f9 	bne.w	80033a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_I2C_Mem_Write+0x34>
 80031ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0ed      	b.n	80033a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_I2C_Mem_Write+0x4e>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e0e6      	b.n	80033a8 <HAL_I2C_Mem_Write+0x21c>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031e2:	f7fe fa35 	bl	8001650 <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2319      	movs	r3, #25
 80031ee:	2201      	movs	r2, #1
 80031f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f001 fa64 	bl	80046c2 <I2C_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0d1      	b.n	80033a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2221      	movs	r2, #33	; 0x21
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2240      	movs	r2, #64	; 0x40
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a3a      	ldr	r2, [r7, #32]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003224:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800322c:	88f8      	ldrh	r0, [r7, #6]
 800322e:	893a      	ldrh	r2, [r7, #8]
 8003230:	8979      	ldrh	r1, [r7, #10]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	4603      	mov	r3, r0
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fd07 	bl	8003c50 <I2C_RequestMemoryWrite>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0a9      	b.n	80033a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	2bff      	cmp	r3, #255	; 0xff
 800325c:	d90e      	bls.n	800327c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	22ff      	movs	r2, #255	; 0xff
 8003262:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	b2da      	uxtb	r2, r3
 800326a:	8979      	ldrh	r1, [r7, #10]
 800326c:	2300      	movs	r3, #0
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f001 fb47 	bl	8004908 <I2C_TransferConfig>
 800327a:	e00f      	b.n	800329c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328a:	b2da      	uxtb	r2, r3
 800328c:	8979      	ldrh	r1, [r7, #10]
 800328e:	2300      	movs	r3, #0
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f001 fb36 	bl	8004908 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f001 fa4e 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e07b      	b.n	80033a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d034      	beq.n	8003354 <HAL_I2C_Mem_Write+0x1c8>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d130      	bne.n	8003354 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	2200      	movs	r2, #0
 80032fa:	2180      	movs	r1, #128	; 0x80
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f001 f9e0 	bl	80046c2 <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e04d      	b.n	80033a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2bff      	cmp	r3, #255	; 0xff
 8003314:	d90e      	bls.n	8003334 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	22ff      	movs	r2, #255	; 0xff
 800331a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	b2da      	uxtb	r2, r3
 8003322:	8979      	ldrh	r1, [r7, #10]
 8003324:	2300      	movs	r3, #0
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f001 faeb 	bl	8004908 <I2C_TransferConfig>
 8003332:	e00f      	b.n	8003354 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	b2da      	uxtb	r2, r3
 8003344:	8979      	ldrh	r1, [r7, #10]
 8003346:	2300      	movs	r3, #0
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f001 fada 	bl	8004908 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d19e      	bne.n	800329c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f001 fa2d 	bl	80047c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e01a      	b.n	80033a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2220      	movs	r2, #32
 8003378:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6859      	ldr	r1, [r3, #4]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <HAL_I2C_Mem_Write+0x224>)
 8003386:	400b      	ands	r3, r1
 8003388:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
  }
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	fe00e800 	.word	0xfe00e800

080033b4 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	4608      	mov	r0, r1
 80033be:	4611      	mov	r1, r2
 80033c0:	461a      	mov	r2, r3
 80033c2:	4603      	mov	r3, r0
 80033c4:	817b      	strh	r3, [r7, #10]
 80033c6:	460b      	mov	r3, r1
 80033c8:	813b      	strh	r3, [r7, #8]
 80033ca:	4613      	mov	r3, r2
 80033cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	f040 80d5 	bne.w	8003586 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_I2C_Mem_Write_DMA+0x34>
 80033e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0c9      	b.n	8003588 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003402:	d101      	bne.n	8003408 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
 8003406:	e0bf      	b.n	8003588 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_I2C_Mem_Write_DMA+0x62>
 8003412:	2302      	movs	r3, #2
 8003414:	e0b8      	b.n	8003588 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800341e:	f7fe f917 	bl	8001650 <HAL_GetTick>
 8003422:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2221      	movs	r2, #33	; 0x21
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2240      	movs	r2, #64	; 0x40
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a51      	ldr	r2, [pc, #324]	; (8003590 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4a51      	ldr	r2, [pc, #324]	; (8003594 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8003450:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	2bff      	cmp	r3, #255	; 0xff
 800345a:	d906      	bls.n	800346a <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	22ff      	movs	r2, #255	; 0xff
 8003460:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003462:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	e007      	b.n	800347a <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003474:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003478:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800347a:	88f8      	ldrh	r0, [r7, #6]
 800347c:	893a      	ldrh	r2, [r7, #8]
 800347e:	8979      	ldrh	r1, [r7, #10]
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	2319      	movs	r3, #25
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	4603      	mov	r3, r0
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fbe0 	bl	8003c50 <I2C_RequestMemoryWrite>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e072      	b.n	8003588 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d020      	beq.n	80034ec <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	4a3a      	ldr	r2, [pc, #232]	; (8003598 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b6:	4a39      	ldr	r2, [pc, #228]	; (800359c <HAL_I2C_Mem_Write_DMA+0x1e8>)
 80034b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	2200      	movs	r2, #0
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3328      	adds	r3, #40	; 0x28
 80034d6:	461a      	mov	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	f7ff fa8e 	bl	80029fc <HAL_DMA_Start_IT>
 80034e0:	4603      	mov	r3, r0
 80034e2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d139      	bne.n	800355e <HAL_I2C_Mem_Write_DMA+0x1aa>
 80034ea:	e013      	b.n	8003514 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e039      	b.n	8003588 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	b2da      	uxtb	r2, r3
 800351a:	8979      	ldrh	r1, [r7, #10]
 800351c:	2300      	movs	r3, #0
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f001 f9f0 	bl	8004908 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003542:	2110      	movs	r1, #16
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f001 fa0d 	bl	8004964 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003558:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e014      	b.n	8003588 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
  }
}
 8003588:	4618      	mov	r0, r3
 800358a:	3720      	adds	r7, #32
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	ffff0000 	.word	0xffff0000
 8003594:	080038ab 	.word	0x080038ab
 8003598:	080045c3 	.word	0x080045c3
 800359c:	08004659 	.word	0x08004659

080035a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
  }
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	70fb      	strb	r3, [r7, #3]
 8003630:	4613      	mov	r3, r2
 8003632:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <I2C_Slave_ISR_IT+0x24>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e0ec      	b.n	80038a2 <I2C_Slave_ISR_IT+0x1fe>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d009      	beq.n	80036f0 <I2C_Slave_ISR_IT+0x4c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80036e8:	6939      	ldr	r1, [r7, #16]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fcee 	bl	80040cc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d04d      	beq.n	8003798 <I2C_Slave_ISR_IT+0xf4>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d047      	beq.n	8003798 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d128      	bne.n	8003764 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b28      	cmp	r3, #40	; 0x28
 800371c:	d108      	bne.n	8003730 <I2C_Slave_ISR_IT+0x8c>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003724:	d104      	bne.n	8003730 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003726:	6939      	ldr	r1, [r7, #16]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fdd9 	bl	80042e0 <I2C_ITListenCplt>
 800372e:	e032      	b.n	8003796 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b29      	cmp	r3, #41	; 0x29
 800373a:	d10e      	bne.n	800375a <I2C_Slave_ISR_IT+0xb6>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003742:	d00a      	beq.n	800375a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2210      	movs	r2, #16
 800374a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 ff14 	bl	800457a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fb91 	bl	8003e7a <I2C_ITSlaveSeqCplt>
 8003758:	e01d      	b.n	8003796 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2210      	movs	r2, #16
 8003760:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003762:	e096      	b.n	8003892 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2210      	movs	r2, #16
 800376a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003770:	f043 0204 	orr.w	r2, r3, #4
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <I2C_Slave_ISR_IT+0xe4>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003784:	f040 8085 	bne.w	8003892 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	4619      	mov	r1, r3
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fdfc 	bl	800438c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003794:	e07d      	b.n	8003892 <I2C_Slave_ISR_IT+0x1ee>
 8003796:	e07c      	b.n	8003892 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d030      	beq.n	8003806 <I2C_Slave_ISR_IT+0x162>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d02a      	beq.n	8003806 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d018      	beq.n	80037ec <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d14f      	bne.n	8003896 <I2C_Slave_ISR_IT+0x1f2>
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037fc:	d04b      	beq.n	8003896 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fb3b 	bl	8003e7a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003804:	e047      	b.n	8003896 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	08db      	lsrs	r3, r3, #3
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800381e:	6939      	ldr	r1, [r7, #16]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fa69 	bl	8003cf8 <I2C_ITAddrCplt>
 8003826:	e037      	b.n	8003898 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d031      	beq.n	8003898 <I2C_Slave_ISR_IT+0x1f4>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d02b      	beq.n	8003898 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	781a      	ldrb	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	; 0x28
 800387a:	e00d      	b.n	8003898 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003882:	d002      	beq.n	800388a <I2C_Slave_ISR_IT+0x1e6>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 faf5 	bl	8003e7a <I2C_ITSlaveSeqCplt>
 8003890:	e002      	b.n	8003898 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003896:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b088      	sub	sp, #32
 80038ae:	af02      	add	r7, sp, #8
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <I2C_Master_ISR_DMA+0x1a>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e0e1      	b.n	8003a88 <I2C_Master_ISR_DMA+0x1de>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d017      	beq.n	8003908 <I2C_Master_ISR_DMA+0x5e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d011      	beq.n	8003908 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2210      	movs	r2, #16
 80038ea:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	f043 0204 	orr.w	r2, r3, #4
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80038f8:	2120      	movs	r1, #32
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f001 f832 	bl	8004964 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fe3a 	bl	800457a <I2C_Flush_TXDR>
 8003906:	e0ba      	b.n	8003a7e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	09db      	lsrs	r3, r3, #7
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d072      	beq.n	80039fa <I2C_Master_ISR_DMA+0x150>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	099b      	lsrs	r3, r3, #6
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d06c      	beq.n	80039fa <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d04e      	beq.n	80039d8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	b29b      	uxth	r3, r3
 8003942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003946:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	2bff      	cmp	r3, #255	; 0xff
 8003950:	d906      	bls.n	8003960 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	22ff      	movs	r2, #255	; 0xff
 8003956:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e010      	b.n	8003982 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003972:	d003      	beq.n	800397c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	e002      	b.n	8003982 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800397c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003980:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	b2da      	uxtb	r2, r3
 8003988:	8a79      	ldrh	r1, [r7, #18]
 800398a:	2300      	movs	r3, #0
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 ffb9 	bl	8004908 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b22      	cmp	r3, #34	; 0x22
 80039b2:	d108      	bne.n	80039c6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039c2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80039c4:	e05b      	b.n	8003a7e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80039d6:	e052      	b.n	8003a7e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039e6:	d003      	beq.n	80039f0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fa09 	bl	8003e00 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80039ee:	e046      	b.n	8003a7e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80039f0:	2140      	movs	r1, #64	; 0x40
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fcca 	bl	800438c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80039f8:	e041      	b.n	8003a7e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d029      	beq.n	8003a5a <I2C_Master_ISR_DMA+0x1b0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	099b      	lsrs	r3, r3, #6
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d023      	beq.n	8003a5a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d119      	bne.n	8003a50 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a2a:	d027      	beq.n	8003a7c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a34:	d108      	bne.n	8003a48 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a44:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003a46:	e019      	b.n	8003a7c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f9d9 	bl	8003e00 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003a4e:	e015      	b.n	8003a7c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003a50:	2140      	movs	r1, #64	; 0x40
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fc9a 	bl	800438c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003a58:	e010      	b.n	8003a7c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <I2C_Master_ISR_DMA+0x1d4>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fa5f 	bl	8003f38 <I2C_ITMasterCplt>
 8003a7a:	e000      	b.n	8003a7e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003a7c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <I2C_Slave_ISR_DMA+0x24>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0c9      	b.n	8003c48 <I2C_Slave_ISR_DMA+0x1b8>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <I2C_Slave_ISR_DMA+0x4c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 faf8 	bl	80040cc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 809a 	beq.w	8003c1e <I2C_Slave_ISR_DMA+0x18e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8093 	beq.w	8003c1e <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	0b9b      	lsrs	r3, r3, #14
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	0bdb      	lsrs	r3, r3, #15
 8003b08:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d07f      	beq.n	8003c10 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00d      	beq.n	8003b34 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	0bdb      	lsrs	r3, r3, #15
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003b30:	2301      	movs	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00d      	beq.n	8003b58 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	0b9b      	lsrs	r3, r3, #14
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003b54:	2301      	movs	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d128      	bne.n	8003bb0 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b28      	cmp	r3, #40	; 0x28
 8003b68:	d108      	bne.n	8003b7c <I2C_Slave_ISR_DMA+0xec>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b70:	d104      	bne.n	8003b7c <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fbb3 	bl	80042e0 <I2C_ITListenCplt>
 8003b7a:	e048      	b.n	8003c0e <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b29      	cmp	r3, #41	; 0x29
 8003b86:	d10e      	bne.n	8003ba6 <I2C_Slave_ISR_DMA+0x116>
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b8e:	d00a      	beq.n	8003ba6 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2210      	movs	r2, #16
 8003b96:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fcee 	bl	800457a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f96b 	bl	8003e7a <I2C_ITSlaveSeqCplt>
 8003ba4:	e033      	b.n	8003c0e <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2210      	movs	r2, #16
 8003bac:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003bae:	e034      	b.n	8003c1a <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2210      	movs	r2, #16
 8003bb6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	f043 0204 	orr.w	r2, r3, #4
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bca:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <I2C_Slave_ISR_DMA+0x14a>
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bd8:	d11f      	bne.n	8003c1a <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	2b21      	cmp	r3, #33	; 0x21
 8003bde:	d002      	beq.n	8003be6 <I2C_Slave_ISR_DMA+0x156>
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b29      	cmp	r3, #41	; 0x29
 8003be4:	d103      	bne.n	8003bee <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2221      	movs	r2, #33	; 0x21
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
 8003bec:	e008      	b.n	8003c00 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
 8003bf0:	2b22      	cmp	r3, #34	; 0x22
 8003bf2:	d002      	beq.n	8003bfa <I2C_Slave_ISR_DMA+0x16a>
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf8:	d102      	bne.n	8003c00 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2222      	movs	r2, #34	; 0x22
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	4619      	mov	r1, r3
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fbc0 	bl	800438c <I2C_ITError>
      if (treatdmanack == 1U)
 8003c0c:	e005      	b.n	8003c1a <I2C_Slave_ISR_DMA+0x18a>
 8003c0e:	e004      	b.n	8003c1a <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2210      	movs	r2, #16
 8003c16:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c18:	e011      	b.n	8003c3e <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003c1a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c1c:	e00f      	b.n	8003c3e <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	08db      	lsrs	r3, r3, #3
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <I2C_Slave_ISR_DMA+0x1ae>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	08db      	lsrs	r3, r3, #3
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f85d 	bl	8003cf8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	4608      	mov	r0, r1
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	817b      	strh	r3, [r7, #10]
 8003c62:	460b      	mov	r3, r1
 8003c64:	813b      	strh	r3, [r7, #8]
 8003c66:	4613      	mov	r3, r2
 8003c68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	8979      	ldrh	r1, [r7, #10]
 8003c70:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <I2C_RequestMemoryWrite+0xa4>)
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fe45 	bl	8004908 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	69b9      	ldr	r1, [r7, #24]
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fd5d 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e02c      	b.n	8003cec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c98:	893b      	ldrh	r3, [r7, #8]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca2:	e015      	b.n	8003cd0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ca4:	893b      	ldrh	r3, [r7, #8]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	69b9      	ldr	r1, [r7, #24]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fd43 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e012      	b.n	8003cec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc6:	893b      	ldrh	r3, [r7, #8]
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fcf1 	bl	80046c2 <I2C_WaitOnFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	80002000 	.word	0x80002000

08003cf8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d0e:	2b28      	cmp	r3, #40	; 0x28
 8003d10:	d16a      	bne.n	8003de8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d30:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d3e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d4c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d138      	bne.n	8003dc8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003d56:	897b      	ldrh	r3, [r7, #10]
 8003d58:	09db      	lsrs	r3, r3, #7
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	89bb      	ldrh	r3, [r7, #12]
 8003d5e:	4053      	eors	r3, r2
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f003 0306 	and.w	r3, r3, #6
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d11c      	bne.n	8003da4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003d6a:	897b      	ldrh	r3, [r7, #10]
 8003d6c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d13b      	bne.n	8003df8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2208      	movs	r2, #8
 8003d8c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d96:	89ba      	ldrh	r2, [r7, #12]
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff fc41 	bl	8003624 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003da2:	e029      	b.n	8003df8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003da4:	893b      	ldrh	r3, [r7, #8]
 8003da6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003da8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fe3d 	bl	8004a2c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dba:	89ba      	ldrh	r2, [r7, #12]
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fc2f 	bl	8003624 <HAL_I2C_AddrCallback>
}
 8003dc6:	e017      	b.n	8003df8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fe2d 	bl	8004a2c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dda:	89ba      	ldrh	r2, [r7, #12]
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	4619      	mov	r1, r3
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff fc1f 	bl	8003624 <HAL_I2C_AddrCallback>
}
 8003de6:	e007      	b.n	8003df8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2208      	movs	r2, #8
 8003dee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b21      	cmp	r3, #33	; 0x21
 8003e1a:	d115      	bne.n	8003e48 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2211      	movs	r2, #17
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e30:	2101      	movs	r1, #1
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fdfa 	bl	8004a2c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff fbc7 	bl	80035d4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e46:	e014      	b.n	8003e72 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2212      	movs	r2, #18
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fde4 	bl	8004a2c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fbbb 	bl	80035e8 <HAL_I2C_MasterRxCpltCallback>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	0b9b      	lsrs	r3, r3, #14
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e00d      	b.n	8003ecc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	0bdb      	lsrs	r3, r3, #15
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eca:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b29      	cmp	r3, #41	; 0x29
 8003ed6:	d112      	bne.n	8003efe <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2228      	movs	r2, #40	; 0x28
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2221      	movs	r2, #33	; 0x21
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fd9f 	bl	8004a2c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff fb80 	bl	80035fc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003efc:	e017      	b.n	8003f2e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b2a      	cmp	r3, #42	; 0x2a
 8003f08:	d111      	bne.n	8003f2e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2228      	movs	r2, #40	; 0x28
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2222      	movs	r2, #34	; 0x22
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f18:	2102      	movs	r1, #2
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fd86 	bl	8004a2c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fb71 	bl	8003610 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b21      	cmp	r3, #33	; 0x21
 8003f58:	d107      	bne.n	8003f6a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fd65 	bl	8004a2c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2211      	movs	r2, #17
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
 8003f68:	e00c      	b.n	8003f84 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b22      	cmp	r3, #34	; 0x22
 8003f74:	d106      	bne.n	8003f84 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f76:	2102      	movs	r1, #2
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fd57 	bl	8004a2c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2212      	movs	r2, #18
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6859      	ldr	r1, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b4d      	ldr	r3, [pc, #308]	; (80040c4 <I2C_ITMasterCplt+0x18c>)
 8003f90:	400b      	ands	r3, r1
 8003f92:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a4a      	ldr	r2, [pc, #296]	; (80040c8 <I2C_ITMasterCplt+0x190>)
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb8:	f043 0204 	orr.w	r2, r3, #4
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b60      	cmp	r3, #96	; 0x60
 8003fca:	d10b      	bne.n	8003fe4 <I2C_ITMasterCplt+0xac>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	089b      	lsrs	r3, r3, #2
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fac8 	bl	800457a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b60      	cmp	r3, #96	; 0x60
 8003ffa:	d002      	beq.n	8004002 <I2C_ITMasterCplt+0xca>
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d006      	beq.n	8004010 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f9bf 	bl	800438c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800400e:	e054      	b.n	80040ba <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b21      	cmp	r3, #33	; 0x21
 800401a:	d124      	bne.n	8004066 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b40      	cmp	r3, #64	; 0x40
 8004034:	d10b      	bne.n	800404e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fb04 	bl	8003654 <HAL_I2C_MemTxCpltCallback>
}
 800404c:	e035      	b.n	80040ba <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fab8 	bl	80035d4 <HAL_I2C_MasterTxCpltCallback>
}
 8004064:	e029      	b.n	80040ba <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b22      	cmp	r3, #34	; 0x22
 8004070:	d123      	bne.n	80040ba <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b40      	cmp	r3, #64	; 0x40
 800408a:	d10b      	bne.n	80040a4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff fae3 	bl	8003668 <HAL_I2C_MemRxCpltCallback>
}
 80040a2:	e00a      	b.n	80040ba <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff fa97 	bl	80035e8 <HAL_I2C_MasterRxCpltCallback>
}
 80040ba:	bf00      	nop
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	fe00e800 	.word	0xfe00e800
 80040c8:	ffff0000 	.word	0xffff0000

080040cc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2220      	movs	r2, #32
 80040f0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b21      	cmp	r3, #33	; 0x21
 80040f6:	d002      	beq.n	80040fe <I2C_ITSlaveCplt+0x32>
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b29      	cmp	r3, #41	; 0x29
 80040fc:	d108      	bne.n	8004110 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80040fe:	f248 0101 	movw	r1, #32769	; 0x8001
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fc92 	bl	8004a2c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2221      	movs	r2, #33	; 0x21
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
 800410e:	e00d      	b.n	800412c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b22      	cmp	r3, #34	; 0x22
 8004114:	d002      	beq.n	800411c <I2C_ITSlaveCplt+0x50>
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b2a      	cmp	r3, #42	; 0x2a
 800411a:	d107      	bne.n	800412c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800411c:	f248 0102 	movw	r1, #32770	; 0x8002
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fc83 	bl	8004a2c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2222      	movs	r2, #34	; 0x22
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800413a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6859      	ldr	r1, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b64      	ldr	r3, [pc, #400]	; (80042d8 <I2C_ITSlaveCplt+0x20c>)
 8004148:	400b      	ands	r3, r1
 800414a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fa14 	bl	800457a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	0b9b      	lsrs	r3, r3, #14
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d013      	beq.n	8004186 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800416c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	2b00      	cmp	r3, #0
 8004174:	d020      	beq.n	80041b8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004184:	e018      	b.n	80041b8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	0bdb      	lsrs	r3, r3, #15
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d012      	beq.n	80041b8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041a0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d006      	beq.n	80041b8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	089b      	lsrs	r3, r3, #2
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d020      	beq.n	8004206 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0304 	bic.w	r3, r3, #4
 80041ca:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00c      	beq.n	8004206 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004214:	f043 0204 	orr.w	r2, r3, #4
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	2b00      	cmp	r3, #0
 8004230:	d010      	beq.n	8004254 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8a7 	bl	800438c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b28      	cmp	r3, #40	; 0x28
 8004248:	d141      	bne.n	80042ce <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800424a:	6979      	ldr	r1, [r7, #20]
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f847 	bl	80042e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004252:	e03c      	b.n	80042ce <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800425c:	d014      	beq.n	8004288 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff fe0b 	bl	8003e7a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a1d      	ldr	r2, [pc, #116]	; (80042dc <I2C_ITSlaveCplt+0x210>)
 8004268:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff f9dd 	bl	8003640 <HAL_I2C_ListenCpltCallback>
}
 8004286:	e022      	b.n	80042ce <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b22      	cmp	r3, #34	; 0x22
 8004292:	d10e      	bne.n	80042b2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff f9b0 	bl	8003610 <HAL_I2C_SlaveRxCpltCallback>
}
 80042b0:	e00d      	b.n	80042ce <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff f997 	bl	80035fc <HAL_I2C_SlaveTxCpltCallback>
}
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	fe00e800 	.word	0xfe00e800
 80042dc:	ffff0000 	.word	0xffff0000

080042e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a26      	ldr	r2, [pc, #152]	; (8004388 <I2C_ITListenCplt+0xa8>)
 80042ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d022      	beq.n	800435e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004334:	2b00      	cmp	r3, #0
 8004336:	d012      	beq.n	800435e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	f043 0204 	orr.w	r2, r3, #4
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800435e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fb62 	bl	8004a2c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2210      	movs	r2, #16
 800436e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff f961 	bl	8003640 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	ffff0000 	.word	0xffff0000

0800438c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800439c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a5d      	ldr	r2, [pc, #372]	; (8004520 <I2C_ITError+0x194>)
 80043aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b28      	cmp	r3, #40	; 0x28
 80043c2:	d005      	beq.n	80043d0 <I2C_ITError+0x44>
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	2b29      	cmp	r3, #41	; 0x29
 80043c8:	d002      	beq.n	80043d0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	2b2a      	cmp	r3, #42	; 0x2a
 80043ce:	d10b      	bne.n	80043e8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80043d0:	2103      	movs	r1, #3
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fb2a 	bl	8004a2c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2228      	movs	r2, #40	; 0x28
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a50      	ldr	r2, [pc, #320]	; (8004524 <I2C_ITError+0x198>)
 80043e4:	635a      	str	r2, [r3, #52]	; 0x34
 80043e6:	e011      	b.n	800440c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80043e8:	f248 0103 	movw	r1, #32771	; 0x8003
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fb1d 	bl	8004a2c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b60      	cmp	r3, #96	; 0x60
 80043fc:	d003      	beq.n	8004406 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	2b00      	cmp	r3, #0
 8004418:	d039      	beq.n	800448e <I2C_ITError+0x102>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b11      	cmp	r3, #17
 800441e:	d002      	beq.n	8004426 <I2C_ITError+0x9a>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b21      	cmp	r3, #33	; 0x21
 8004424:	d133      	bne.n	800448e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004434:	d107      	bne.n	8004446 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004444:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe fc26 	bl	8002c9c <HAL_DMA_GetState>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d017      	beq.n	8004486 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	4a33      	ldr	r2, [pc, #204]	; (8004528 <I2C_ITError+0x19c>)
 800445c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fb26 	bl	8002abc <HAL_DMA_Abort_IT>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d04d      	beq.n	8004512 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004480:	4610      	mov	r0, r2
 8004482:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004484:	e045      	b.n	8004512 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f850 	bl	800452c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800448c:	e041      	b.n	8004512 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d039      	beq.n	800450a <I2C_ITError+0x17e>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b12      	cmp	r3, #18
 800449a:	d002      	beq.n	80044a2 <I2C_ITError+0x116>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b22      	cmp	r3, #34	; 0x22
 80044a0:	d133      	bne.n	800450a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b0:	d107      	bne.n	80044c2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044c0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe fbe8 	bl	8002c9c <HAL_DMA_GetState>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d017      	beq.n	8004502 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	4a14      	ldr	r2, [pc, #80]	; (8004528 <I2C_ITError+0x19c>)
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe fae8 	bl	8002abc <HAL_DMA_Abort_IT>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d011      	beq.n	8004516 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044fc:	4610      	mov	r0, r2
 80044fe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004500:	e009      	b.n	8004516 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f812 	bl	800452c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004508:	e005      	b.n	8004516 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f80e 	bl	800452c <I2C_TreatErrorCallback>
  }
}
 8004510:	e002      	b.n	8004518 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004512:	bf00      	nop
 8004514:	e000      	b.n	8004518 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004516:	bf00      	nop
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	ffff0000 	.word	0xffff0000
 8004524:	080036a5 	.word	0x080036a5
 8004528:	08004687 	.word	0x08004687

0800452c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b60      	cmp	r3, #96	; 0x60
 800453e:	d10e      	bne.n	800455e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff f89a 	bl	8003690 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800455c:	e009      	b.n	8004572 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff f885 	bl	800367c <HAL_I2C_ErrorCallback>
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b02      	cmp	r3, #2
 800458e:	d103      	bne.n	8004598 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2200      	movs	r2, #0
 8004596:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d007      	beq.n	80045b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699a      	ldr	r2, [r3, #24]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	619a      	str	r2, [r3, #24]
  }
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045de:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d104      	bne.n	80045f4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80045ea:	2120      	movs	r1, #32
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f9b9 	bl	8004964 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80045f2:	e02d      	b.n	8004650 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80045fc:	441a      	add	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	2bff      	cmp	r3, #255	; 0xff
 800460a:	d903      	bls.n	8004614 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	22ff      	movs	r2, #255	; 0xff
 8004610:	851a      	strh	r2, [r3, #40]	; 0x28
 8004612:	e004      	b.n	800461e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	4619      	mov	r1, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3328      	adds	r3, #40	; 0x28
 800462e:	461a      	mov	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004634:	f7fe f9e2 	bl	80029fc <HAL_DMA_Start_IT>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800463e:	2110      	movs	r1, #16
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7ff fea3 	bl	800438c <I2C_ITError>
}
 8004646:	e003      	b.n	8004650 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004648:	2140      	movs	r1, #64	; 0x40
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f98a 	bl	8004964 <I2C_Enable_IRQ>
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004674:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004676:	2110      	movs	r1, #16
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff fe87 	bl	800438c <I2C_ITError>
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	2200      	movs	r2, #0
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	2200      	movs	r2, #0
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7ff ff39 	bl	800452c <I2C_TreatErrorCallback>
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d2:	e022      	b.n	800471a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d01e      	beq.n	800471a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046dc:	f7fc ffb8 	bl	8001650 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d302      	bcc.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d113      	bne.n	800471a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e00f      	b.n	800473a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	429a      	cmp	r2, r3
 8004736:	d0cd      	beq.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800474e:	e02c      	b.n	80047aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f871 	bl	800483c <I2C_IsAcknowledgeFailed>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e02a      	b.n	80047ba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d01e      	beq.n	80047aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476c:	f7fc ff70 	bl	8001650 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d113      	bne.n	80047aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e007      	b.n	80047ba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d1cb      	bne.n	8004750 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047ce:	e028      	b.n	8004822 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f831 	bl	800483c <I2C_IsAcknowledgeFailed>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e026      	b.n	8004832 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e4:	f7fc ff34 	bl	8001650 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d113      	bne.n	8004822 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fe:	f043 0220 	orr.w	r2, r3, #32
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e007      	b.n	8004832 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b20      	cmp	r3, #32
 800482e:	d1cf      	bne.n	80047d0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b10      	cmp	r3, #16
 8004854:	d151      	bne.n	80048fa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004856:	e022      	b.n	800489e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d01e      	beq.n	800489e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004860:	f7fc fef6 	bl	8001650 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	429a      	cmp	r2, r3
 800486e:	d302      	bcc.n	8004876 <I2C_IsAcknowledgeFailed+0x3a>
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d113      	bne.n	800489e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	f043 0220 	orr.w	r2, r3, #32
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e02e      	b.n	80048fc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	d1d5      	bne.n	8004858 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2210      	movs	r2, #16
 80048b2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2220      	movs	r2, #32
 80048ba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff fe5c 	bl	800457a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6859      	ldr	r1, [r3, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <I2C_IsAcknowledgeFailed+0xc8>)
 80048ce:	400b      	ands	r3, r1
 80048d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	f043 0204 	orr.w	r2, r3, #4
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	fe00e800 	.word	0xfe00e800

08004908 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	460b      	mov	r3, r1
 8004914:	817b      	strh	r3, [r7, #10]
 8004916:	4613      	mov	r3, r2
 8004918:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	0d5b      	lsrs	r3, r3, #21
 8004924:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <I2C_TransferConfig+0x58>)
 800492a:	430b      	orrs	r3, r1
 800492c:	43db      	mvns	r3, r3
 800492e:	ea02 0103 	and.w	r1, r2, r3
 8004932:	897b      	ldrh	r3, [r7, #10]
 8004934:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004938:	7a7b      	ldrb	r3, [r7, #9]
 800493a:	041b      	lsls	r3, r3, #16
 800493c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	431a      	orrs	r2, r3
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	431a      	orrs	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	03ff63ff 	.word	0x03ff63ff

08004964 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	4a2a      	ldr	r2, [pc, #168]	; (8004a24 <I2C_Enable_IRQ+0xc0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004982:	4a29      	ldr	r2, [pc, #164]	; (8004a28 <I2C_Enable_IRQ+0xc4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d11d      	bne.n	80049c4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004988:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800498c:	2b00      	cmp	r3, #0
 800498e:	da03      	bge.n	8004998 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004996:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004998:	887b      	ldrh	r3, [r7, #2]
 800499a:	2b10      	cmp	r3, #16
 800499c:	d103      	bne.n	80049a6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80049a4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80049a6:	887b      	ldrh	r3, [r7, #2]
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d103      	bne.n	80049b4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80049b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80049b4:	887b      	ldrh	r3, [r7, #2]
 80049b6:	2b40      	cmp	r3, #64	; 0x40
 80049b8:	d125      	bne.n	8004a06 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80049c2:	e020      	b.n	8004a06 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80049c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	da03      	bge.n	80049d4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80049d2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80049e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80049e6:	887b      	ldrh	r3, [r7, #2]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80049f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80049f8:	887b      	ldrh	r3, [r7, #2]
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d103      	bne.n	8004a06 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f043 0320 	orr.w	r3, r3, #32
 8004a04:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6819      	ldr	r1, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]
}
 8004a16:	bf00      	nop
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	080038ab 	.word	0x080038ab
 8004a28:	08003a91 	.word	0x08003a91

08004a2c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a3c:	887b      	ldrh	r3, [r7, #2]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00f      	beq.n	8004a66 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004a4c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a5a:	2b28      	cmp	r3, #40	; 0x28
 8004a5c:	d003      	beq.n	8004a66 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004a64:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a66:	887b      	ldrh	r3, [r7, #2]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00f      	beq.n	8004a90 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004a76:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a84:	2b28      	cmp	r3, #40	; 0x28
 8004a86:	d003      	beq.n	8004a90 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004a8e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	da03      	bge.n	8004aa0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004a9e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004aa0:	887b      	ldrh	r3, [r7, #2]
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d103      	bne.n	8004aae <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004aac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004aae:	887b      	ldrh	r3, [r7, #2]
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d103      	bne.n	8004abc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f043 0320 	orr.w	r3, r3, #32
 8004aba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004abc:	887b      	ldrh	r3, [r7, #2]
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d103      	bne.n	8004aca <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	400a      	ands	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d138      	bne.n	8004b70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e032      	b.n	8004b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	; 0x24
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e000      	b.n	8004b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b70:	2302      	movs	r3, #2
  }
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d139      	bne.n	8004c08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e033      	b.n	8004c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2224      	movs	r2, #36	; 0x24
 8004bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004bd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	e000      	b.n	8004c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
  }
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40007000 	.word	0x40007000

08004c34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c42:	d130      	bne.n	8004ca6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c44:	4b23      	ldr	r3, [pc, #140]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c50:	d038      	beq.n	8004cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c52:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c5a:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c62:	4b1d      	ldr	r3, [pc, #116]	; (8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2232      	movs	r2, #50	; 0x32
 8004c68:	fb02 f303 	mul.w	r3, r2, r3
 8004c6c:	4a1b      	ldr	r2, [pc, #108]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	0c9b      	lsrs	r3, r3, #18
 8004c74:	3301      	adds	r3, #1
 8004c76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c78:	e002      	b.n	8004c80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c80:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8c:	d102      	bne.n	8004c94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f2      	bne.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c94:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca0:	d110      	bne.n	8004cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e00f      	b.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb2:	d007      	beq.n	8004cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cb4:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cbc:	4a05      	ldr	r2, [pc, #20]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40007000 	.word	0x40007000
 8004cd8:	20000000 	.word	0x20000000
 8004cdc:	431bde83 	.word	0x431bde83

08004ce0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_PWREx_EnableVddIO2+0x1c>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4a04      	ldr	r2, [pc, #16]	; (8004cfc <HAL_PWREx_EnableVddIO2+0x1c>)
 8004cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cee:	6053      	str	r3, [r2, #4]
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40007000 	.word	0x40007000

08004d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f000 bc16 	b.w	8005540 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d14:	4ba0      	ldr	r3, [pc, #640]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d1e:	4b9e      	ldr	r3, [pc, #632]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80e4 	beq.w	8004efe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d007      	beq.n	8004d4c <HAL_RCC_OscConfig+0x4c>
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b0c      	cmp	r3, #12
 8004d40:	f040 808b 	bne.w	8004e5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	f040 8087 	bne.w	8004e5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d4c:	4b92      	ldr	r3, [pc, #584]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_RCC_OscConfig+0x64>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e3ed      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	4b8b      	ldr	r3, [pc, #556]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <HAL_RCC_OscConfig+0x7e>
 8004d74:	4b88      	ldr	r3, [pc, #544]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d7c:	e005      	b.n	8004d8a <HAL_RCC_OscConfig+0x8a>
 8004d7e:	4b86      	ldr	r3, [pc, #536]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d223      	bcs.n	8004dd6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fd48 	bl	8005828 <RCC_SetFlashLatencyFromMSIRange>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e3ce      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004da2:	4b7d      	ldr	r3, [pc, #500]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a7c      	ldr	r2, [pc, #496]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004da8:	f043 0308 	orr.w	r3, r3, #8
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4b7a      	ldr	r3, [pc, #488]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	4977      	ldr	r1, [pc, #476]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dc0:	4b75      	ldr	r3, [pc, #468]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	4972      	ldr	r1, [pc, #456]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	604b      	str	r3, [r1, #4]
 8004dd4:	e025      	b.n	8004e22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dd6:	4b70      	ldr	r3, [pc, #448]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a6f      	ldr	r2, [pc, #444]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004ddc:	f043 0308 	orr.w	r3, r3, #8
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	4b6d      	ldr	r3, [pc, #436]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	496a      	ldr	r1, [pc, #424]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004df4:	4b68      	ldr	r3, [pc, #416]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	4965      	ldr	r1, [pc, #404]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fd08 	bl	8005828 <RCC_SetFlashLatencyFromMSIRange>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e38e      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e22:	f000 fc75 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 8004e26:	4602      	mov	r2, r0
 8004e28:	4b5b      	ldr	r3, [pc, #364]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	495a      	ldr	r1, [pc, #360]	; (8004f9c <HAL_RCC_OscConfig+0x29c>)
 8004e34:	5ccb      	ldrb	r3, [r1, r3]
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3e:	4a58      	ldr	r2, [pc, #352]	; (8004fa0 <HAL_RCC_OscConfig+0x2a0>)
 8004e40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e42:	4b58      	ldr	r3, [pc, #352]	; (8004fa4 <HAL_RCC_OscConfig+0x2a4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fc fbb2 	bl	80015b0 <HAL_InitTick>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d052      	beq.n	8004efc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	e372      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d032      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e62:	4b4d      	ldr	r3, [pc, #308]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a4c      	ldr	r2, [pc, #304]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e6e:	f7fc fbef 	bl	8001650 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e76:	f7fc fbeb 	bl	8001650 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e35b      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e88:	4b43      	ldr	r3, [pc, #268]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e94:	4b40      	ldr	r3, [pc, #256]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a3f      	ldr	r2, [pc, #252]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004e9a:	f043 0308 	orr.w	r3, r3, #8
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	4b3d      	ldr	r3, [pc, #244]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	493a      	ldr	r1, [pc, #232]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004eb2:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	4935      	ldr	r1, [pc, #212]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	604b      	str	r3, [r1, #4]
 8004ec6:	e01a      	b.n	8004efe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ec8:	4b33      	ldr	r3, [pc, #204]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a32      	ldr	r2, [pc, #200]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ed4:	f7fc fbbc 	bl	8001650 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004edc:	f7fc fbb8 	bl	8001650 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e328      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004eee:	4b2a      	ldr	r3, [pc, #168]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x1dc>
 8004efa:	e000      	b.n	8004efe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004efc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d073      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_OscConfig+0x21c>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	d10e      	bne.n	8004f34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d10b      	bne.n	8004f34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d063      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x2f0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d15f      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e305      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3c:	d106      	bne.n	8004f4c <HAL_RCC_OscConfig+0x24c>
 8004f3e:	4b16      	ldr	r3, [pc, #88]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a15      	ldr	r2, [pc, #84]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e01d      	b.n	8004f88 <HAL_RCC_OscConfig+0x288>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x270>
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a0f      	ldr	r2, [pc, #60]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a0c      	ldr	r2, [pc, #48]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	e00b      	b.n	8004f88 <HAL_RCC_OscConfig+0x288>
 8004f70:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a05      	ldr	r2, [pc, #20]	; (8004f98 <HAL_RCC_OscConfig+0x298>)
 8004f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01b      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fc fb5e 	bl	8001650 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f96:	e010      	b.n	8004fba <HAL_RCC_OscConfig+0x2ba>
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	08006948 	.word	0x08006948
 8004fa0:	20000000 	.word	0x20000000
 8004fa4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fa8:	f7fc fb52 	bl	8001650 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b64      	cmp	r3, #100	; 0x64
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e2c2      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fba:	4baf      	ldr	r3, [pc, #700]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x2a8>
 8004fc6:	e014      	b.n	8004ff2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fc fb42 	bl	8001650 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd0:	f7fc fb3e 	bl	8001650 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	; 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e2ae      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fe2:	4ba5      	ldr	r3, [pc, #660]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x2d0>
 8004fee:	e000      	b.n	8004ff2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d060      	beq.n	80050c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b04      	cmp	r3, #4
 8005002:	d005      	beq.n	8005010 <HAL_RCC_OscConfig+0x310>
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b0c      	cmp	r3, #12
 8005008:	d119      	bne.n	800503e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d116      	bne.n	800503e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005010:	4b99      	ldr	r3, [pc, #612]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <HAL_RCC_OscConfig+0x328>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e28b      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005028:	4b93      	ldr	r3, [pc, #588]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	061b      	lsls	r3, r3, #24
 8005036:	4990      	ldr	r1, [pc, #576]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005038:	4313      	orrs	r3, r2
 800503a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800503c:	e040      	b.n	80050c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d023      	beq.n	800508e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005046:	4b8c      	ldr	r3, [pc, #560]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a8b      	ldr	r2, [pc, #556]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 800504c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005052:	f7fc fafd 	bl	8001650 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505a:	f7fc faf9 	bl	8001650 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e269      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800506c:	4b82      	ldr	r3, [pc, #520]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005078:	4b7f      	ldr	r3, [pc, #508]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	061b      	lsls	r3, r3, #24
 8005086:	497c      	ldr	r1, [pc, #496]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005088:	4313      	orrs	r3, r2
 800508a:	604b      	str	r3, [r1, #4]
 800508c:	e018      	b.n	80050c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800508e:	4b7a      	ldr	r3, [pc, #488]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a79      	ldr	r2, [pc, #484]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509a:	f7fc fad9 	bl	8001650 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a2:	f7fc fad5 	bl	8001650 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e245      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050b4:	4b70      	ldr	r3, [pc, #448]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f0      	bne.n	80050a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d03c      	beq.n	8005146 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01c      	beq.n	800510e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050d4:	4b68      	ldr	r3, [pc, #416]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 80050d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050da:	4a67      	ldr	r2, [pc, #412]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e4:	f7fc fab4 	bl	8001650 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ec:	f7fc fab0 	bl	8001650 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e220      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050fe:	4b5e      	ldr	r3, [pc, #376]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0ef      	beq.n	80050ec <HAL_RCC_OscConfig+0x3ec>
 800510c:	e01b      	b.n	8005146 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800510e:	4b5a      	ldr	r3, [pc, #360]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005114:	4a58      	ldr	r2, [pc, #352]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511e:	f7fc fa97 	bl	8001650 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005126:	f7fc fa93 	bl	8001650 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e203      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005138:	4b4f      	ldr	r3, [pc, #316]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 800513a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1ef      	bne.n	8005126 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 80a6 	beq.w	80052a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005154:	2300      	movs	r3, #0
 8005156:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005158:	4b47      	ldr	r3, [pc, #284]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10d      	bne.n	8005180 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005164:	4b44      	ldr	r3, [pc, #272]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005168:	4a43      	ldr	r2, [pc, #268]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 800516a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516e:	6593      	str	r3, [r2, #88]	; 0x58
 8005170:	4b41      	ldr	r3, [pc, #260]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517c:	2301      	movs	r3, #1
 800517e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005180:	4b3e      	ldr	r3, [pc, #248]	; (800527c <HAL_RCC_OscConfig+0x57c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005188:	2b00      	cmp	r3, #0
 800518a:	d118      	bne.n	80051be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800518c:	4b3b      	ldr	r3, [pc, #236]	; (800527c <HAL_RCC_OscConfig+0x57c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a3a      	ldr	r2, [pc, #232]	; (800527c <HAL_RCC_OscConfig+0x57c>)
 8005192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005196:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005198:	f7fc fa5a 	bl	8001650 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a0:	f7fc fa56 	bl	8001650 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e1c6      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051b2:	4b32      	ldr	r3, [pc, #200]	; (800527c <HAL_RCC_OscConfig+0x57c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d108      	bne.n	80051d8 <HAL_RCC_OscConfig+0x4d8>
 80051c6:	4b2c      	ldr	r3, [pc, #176]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051cc:	4a2a      	ldr	r2, [pc, #168]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051d6:	e024      	b.n	8005222 <HAL_RCC_OscConfig+0x522>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2b05      	cmp	r3, #5
 80051de:	d110      	bne.n	8005202 <HAL_RCC_OscConfig+0x502>
 80051e0:	4b25      	ldr	r3, [pc, #148]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e6:	4a24      	ldr	r2, [pc, #144]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 80051e8:	f043 0304 	orr.w	r3, r3, #4
 80051ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051f0:	4b21      	ldr	r3, [pc, #132]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 80051f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f6:	4a20      	ldr	r2, [pc, #128]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 80051f8:	f043 0301 	orr.w	r3, r3, #1
 80051fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005200:	e00f      	b.n	8005222 <HAL_RCC_OscConfig+0x522>
 8005202:	4b1d      	ldr	r3, [pc, #116]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005208:	4a1b      	ldr	r2, [pc, #108]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 800520a:	f023 0301 	bic.w	r3, r3, #1
 800520e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005212:	4b19      	ldr	r3, [pc, #100]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 8005214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005218:	4a17      	ldr	r2, [pc, #92]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 800521a:	f023 0304 	bic.w	r3, r3, #4
 800521e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522a:	f7fc fa11 	bl	8001650 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005230:	e00a      	b.n	8005248 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005232:	f7fc fa0d 	bl	8001650 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005240:	4293      	cmp	r3, r2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e17b      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <HAL_RCC_OscConfig+0x578>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0ed      	beq.n	8005232 <HAL_RCC_OscConfig+0x532>
 8005256:	e01a      	b.n	800528e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005258:	f7fc f9fa 	bl	8001650 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800525e:	e00f      	b.n	8005280 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005260:	f7fc f9f6 	bl	8001650 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	; 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d906      	bls.n	8005280 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e164      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
 8005276:	bf00      	nop
 8005278:	40021000 	.word	0x40021000
 800527c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005280:	4ba8      	ldr	r3, [pc, #672]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e8      	bne.n	8005260 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800528e:	7ffb      	ldrb	r3, [r7, #31]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d105      	bne.n	80052a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005294:	4ba3      	ldr	r3, [pc, #652]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 8005296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005298:	4aa2      	ldr	r2, [pc, #648]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 800529a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800529e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d03c      	beq.n	8005326 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01c      	beq.n	80052ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052b4:	4b9b      	ldr	r3, [pc, #620]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80052b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052ba:	4a9a      	ldr	r2, [pc, #616]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80052bc:	f043 0301 	orr.w	r3, r3, #1
 80052c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c4:	f7fc f9c4 	bl	8001650 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052cc:	f7fc f9c0 	bl	8001650 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e130      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052de:	4b91      	ldr	r3, [pc, #580]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80052e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0ef      	beq.n	80052cc <HAL_RCC_OscConfig+0x5cc>
 80052ec:	e01b      	b.n	8005326 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052ee:	4b8d      	ldr	r3, [pc, #564]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80052f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052f4:	4a8b      	ldr	r2, [pc, #556]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fe:	f7fc f9a7 	bl	8001650 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005306:	f7fc f9a3 	bl	8001650 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e113      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005318:	4b82      	ldr	r3, [pc, #520]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 800531a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1ef      	bne.n	8005306 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 8107 	beq.w	800553e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	2b02      	cmp	r3, #2
 8005336:	f040 80cb 	bne.w	80054d0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800533a:	4b7a      	ldr	r3, [pc, #488]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f003 0203 	and.w	r2, r3, #3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	429a      	cmp	r2, r3
 800534c:	d12c      	bne.n	80053a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	3b01      	subs	r3, #1
 800535a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800535c:	429a      	cmp	r2, r3
 800535e:	d123      	bne.n	80053a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800536c:	429a      	cmp	r2, r3
 800536e:	d11b      	bne.n	80053a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d113      	bne.n	80053a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	3b01      	subs	r3, #1
 800538e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005390:	429a      	cmp	r2, r3
 8005392:	d109      	bne.n	80053a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	3b01      	subs	r3, #1
 80053a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d06d      	beq.n	8005484 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b0c      	cmp	r3, #12
 80053ac:	d068      	beq.n	8005480 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053ae:	4b5d      	ldr	r3, [pc, #372]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d105      	bne.n	80053c6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80053ba:	4b5a      	ldr	r3, [pc, #360]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e0ba      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053ca:	4b56      	ldr	r3, [pc, #344]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a55      	ldr	r2, [pc, #340]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80053d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053d6:	f7fc f93b 	bl	8001650 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053de:	f7fc f937 	bl	8001650 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e0a7      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f0:	4b4c      	ldr	r3, [pc, #304]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053fc:	4b49      	ldr	r3, [pc, #292]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	4b49      	ldr	r3, [pc, #292]	; (8005528 <HAL_RCC_OscConfig+0x828>)
 8005402:	4013      	ands	r3, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800540c:	3a01      	subs	r2, #1
 800540e:	0112      	lsls	r2, r2, #4
 8005410:	4311      	orrs	r1, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005416:	0212      	lsls	r2, r2, #8
 8005418:	4311      	orrs	r1, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800541e:	0852      	lsrs	r2, r2, #1
 8005420:	3a01      	subs	r2, #1
 8005422:	0552      	lsls	r2, r2, #21
 8005424:	4311      	orrs	r1, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800542a:	0852      	lsrs	r2, r2, #1
 800542c:	3a01      	subs	r2, #1
 800542e:	0652      	lsls	r2, r2, #25
 8005430:	4311      	orrs	r1, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005436:	06d2      	lsls	r2, r2, #27
 8005438:	430a      	orrs	r2, r1
 800543a:	493a      	ldr	r1, [pc, #232]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 800543c:	4313      	orrs	r3, r2
 800543e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005440:	4b38      	ldr	r3, [pc, #224]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a37      	ldr	r2, [pc, #220]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 8005446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800544a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800544c:	4b35      	ldr	r3, [pc, #212]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	4a34      	ldr	r2, [pc, #208]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 8005452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005456:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005458:	f7fc f8fa 	bl	8001650 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005460:	f7fc f8f6 	bl	8001650 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e066      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005472:	4b2c      	ldr	r3, [pc, #176]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800547e:	e05e      	b.n	800553e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e05d      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005484:	4b27      	ldr	r3, [pc, #156]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d156      	bne.n	800553e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005490:	4b24      	ldr	r3, [pc, #144]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a23      	ldr	r2, [pc, #140]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 8005496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800549a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800549c:	4b21      	ldr	r3, [pc, #132]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a20      	ldr	r2, [pc, #128]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80054a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054a8:	f7fc f8d2 	bl	8001650 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b0:	f7fc f8ce 	bl	8001650 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e03e      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c2:	4b18      	ldr	r3, [pc, #96]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0x7b0>
 80054ce:	e036      	b.n	800553e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2b0c      	cmp	r3, #12
 80054d4:	d031      	beq.n	800553a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d6:	4b13      	ldr	r3, [pc, #76]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a12      	ldr	r2, [pc, #72]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80054dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80054e2:	4b10      	ldr	r3, [pc, #64]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d105      	bne.n	80054fa <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054fa:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	4a09      	ldr	r2, [pc, #36]	; (8005524 <HAL_RCC_OscConfig+0x824>)
 8005500:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005508:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7fc f8a1 	bl	8001650 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005510:	e00c      	b.n	800552c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005512:	f7fc f89d 	bl	8001650 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d905      	bls.n	800552c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e00d      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
 8005524:	40021000 	.word	0x40021000
 8005528:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <HAL_RCC_OscConfig+0x848>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ec      	bne.n	8005512 <HAL_RCC_OscConfig+0x812>
 8005538:	e001      	b.n	800553e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40021000 	.word	0x40021000

0800554c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0c8      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005560:	4b66      	ldr	r3, [pc, #408]	; (80056fc <HAL_RCC_ClockConfig+0x1b0>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d910      	bls.n	8005590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556e:	4b63      	ldr	r3, [pc, #396]	; (80056fc <HAL_RCC_ClockConfig+0x1b0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 0207 	bic.w	r2, r3, #7
 8005576:	4961      	ldr	r1, [pc, #388]	; (80056fc <HAL_RCC_ClockConfig+0x1b0>)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	4313      	orrs	r3, r2
 800557c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b5f      	ldr	r3, [pc, #380]	; (80056fc <HAL_RCC_ClockConfig+0x1b0>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0b0      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d04c      	beq.n	8005636 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d107      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a4:	4b56      	ldr	r3, [pc, #344]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d121      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e09e      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d107      	bne.n	80055cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055bc:	4b50      	ldr	r3, [pc, #320]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d115      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e092      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d107      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055d4:	4b4a      	ldr	r3, [pc, #296]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e086      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055e4:	4b46      	ldr	r3, [pc, #280]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e07e      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055f4:	4b42      	ldr	r3, [pc, #264]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f023 0203 	bic.w	r2, r3, #3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	493f      	ldr	r1, [pc, #252]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 8005602:	4313      	orrs	r3, r2
 8005604:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005606:	f7fc f823 	bl	8001650 <HAL_GetTick>
 800560a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560c:	e00a      	b.n	8005624 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560e:	f7fc f81f 	bl	8001650 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f241 3288 	movw	r2, #5000	; 0x1388
 800561c:	4293      	cmp	r3, r2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e066      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005624:	4b36      	ldr	r3, [pc, #216]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 020c 	and.w	r2, r3, #12
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	429a      	cmp	r2, r3
 8005634:	d1eb      	bne.n	800560e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d008      	beq.n	8005654 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005642:	4b2f      	ldr	r3, [pc, #188]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	492c      	ldr	r1, [pc, #176]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 8005650:	4313      	orrs	r3, r2
 8005652:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005654:	4b29      	ldr	r3, [pc, #164]	; (80056fc <HAL_RCC_ClockConfig+0x1b0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d210      	bcs.n	8005684 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b26      	ldr	r3, [pc, #152]	; (80056fc <HAL_RCC_ClockConfig+0x1b0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 0207 	bic.w	r2, r3, #7
 800566a:	4924      	ldr	r1, [pc, #144]	; (80056fc <HAL_RCC_ClockConfig+0x1b0>)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005672:	4b22      	ldr	r3, [pc, #136]	; (80056fc <HAL_RCC_ClockConfig+0x1b0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d001      	beq.n	8005684 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e036      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005690:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4918      	ldr	r1, [pc, #96]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ae:	4b14      	ldr	r3, [pc, #80]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4910      	ldr	r1, [pc, #64]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056c2:	f000 f825 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80056c6:	4602      	mov	r2, r0
 80056c8:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <HAL_RCC_ClockConfig+0x1b4>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	490c      	ldr	r1, [pc, #48]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 80056d4:	5ccb      	ldrb	r3, [r1, r3]
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	fa22 f303 	lsr.w	r3, r2, r3
 80056de:	4a0a      	ldr	r2, [pc, #40]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056e2:	4b0a      	ldr	r3, [pc, #40]	; (800570c <HAL_RCC_ClockConfig+0x1c0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fb ff62 	bl	80015b0 <HAL_InitTick>
 80056ec:	4603      	mov	r3, r0
 80056ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80056f0:	7afb      	ldrb	r3, [r7, #11]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40022000 	.word	0x40022000
 8005700:	40021000 	.word	0x40021000
 8005704:	08006948 	.word	0x08006948
 8005708:	20000000 	.word	0x20000000
 800570c:	20000004 	.word	0x20000004

08005710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005710:	b480      	push	{r7}
 8005712:	b089      	sub	sp, #36	; 0x24
 8005714:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	2300      	movs	r3, #0
 800571c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800571e:	4b3e      	ldr	r3, [pc, #248]	; (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005728:	4b3b      	ldr	r3, [pc, #236]	; (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0x34>
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d121      	bne.n	8005782 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d11e      	bne.n	8005782 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005744:	4b34      	ldr	r3, [pc, #208]	; (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	d107      	bne.n	8005760 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005750:	4b31      	ldr	r3, [pc, #196]	; (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 8005752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005756:	0a1b      	lsrs	r3, r3, #8
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	e005      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005760:	4b2d      	ldr	r3, [pc, #180]	; (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800576c:	4a2b      	ldr	r2, [pc, #172]	; (800581c <HAL_RCC_GetSysClockFreq+0x10c>)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005774:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10d      	bne.n	8005798 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005780:	e00a      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2b04      	cmp	r3, #4
 8005786:	d102      	bne.n	800578e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005788:	4b25      	ldr	r3, [pc, #148]	; (8005820 <HAL_RCC_GetSysClockFreq+0x110>)
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e004      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b08      	cmp	r3, #8
 8005792:	d101      	bne.n	8005798 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005794:	4b23      	ldr	r3, [pc, #140]	; (8005824 <HAL_RCC_GetSysClockFreq+0x114>)
 8005796:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	2b0c      	cmp	r3, #12
 800579c:	d134      	bne.n	8005808 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800579e:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d003      	beq.n	80057b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d003      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0xac>
 80057b4:	e005      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057b6:	4b1a      	ldr	r3, [pc, #104]	; (8005820 <HAL_RCC_GetSysClockFreq+0x110>)
 80057b8:	617b      	str	r3, [r7, #20]
      break;
 80057ba:	e005      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057bc:	4b19      	ldr	r3, [pc, #100]	; (8005824 <HAL_RCC_GetSysClockFreq+0x114>)
 80057be:	617b      	str	r3, [r7, #20]
      break;
 80057c0:	e002      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	617b      	str	r3, [r7, #20]
      break;
 80057c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057c8:	4b13      	ldr	r3, [pc, #76]	; (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	3301      	adds	r3, #1
 80057d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057d6:	4b10      	ldr	r3, [pc, #64]	; (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	fb02 f203 	mul.w	r2, r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057ee:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	0e5b      	lsrs	r3, r3, #25
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	3301      	adds	r3, #1
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	fbb2 f3f3 	udiv	r3, r2, r3
 8005806:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005808:	69bb      	ldr	r3, [r7, #24]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3724      	adds	r7, #36	; 0x24
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000
 800581c:	08006958 	.word	0x08006958
 8005820:	00f42400 	.word	0x00f42400
 8005824:	007a1200 	.word	0x007a1200

08005828 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005834:	4b2a      	ldr	r3, [pc, #168]	; (80058e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005840:	f7ff f9ea 	bl	8004c18 <HAL_PWREx_GetVoltageRange>
 8005844:	6178      	str	r0, [r7, #20]
 8005846:	e014      	b.n	8005872 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005848:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800584a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584c:	4a24      	ldr	r2, [pc, #144]	; (80058e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800584e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005852:	6593      	str	r3, [r2, #88]	; 0x58
 8005854:	4b22      	ldr	r3, [pc, #136]	; (80058e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005860:	f7ff f9da 	bl	8004c18 <HAL_PWREx_GetVoltageRange>
 8005864:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005866:	4b1e      	ldr	r3, [pc, #120]	; (80058e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586a:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800586c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005870:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005878:	d10b      	bne.n	8005892 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b80      	cmp	r3, #128	; 0x80
 800587e:	d919      	bls.n	80058b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2ba0      	cmp	r3, #160	; 0xa0
 8005884:	d902      	bls.n	800588c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005886:	2302      	movs	r3, #2
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	e013      	b.n	80058b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800588c:	2301      	movs	r3, #1
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	e010      	b.n	80058b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b80      	cmp	r3, #128	; 0x80
 8005896:	d902      	bls.n	800589e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005898:	2303      	movs	r3, #3
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	e00a      	b.n	80058b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b80      	cmp	r3, #128	; 0x80
 80058a2:	d102      	bne.n	80058aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058a4:	2302      	movs	r3, #2
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	e004      	b.n	80058b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b70      	cmp	r3, #112	; 0x70
 80058ae:	d101      	bne.n	80058b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058b0:	2301      	movs	r3, #1
 80058b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80058b4:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f023 0207 	bic.w	r2, r3, #7
 80058bc:	4909      	ldr	r1, [pc, #36]	; (80058e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80058c4:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d001      	beq.n	80058d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40021000 	.word	0x40021000
 80058e4:	40022000 	.word	0x40022000

080058e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058f0:	2300      	movs	r3, #0
 80058f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058f4:	2300      	movs	r3, #0
 80058f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005900:	2b00      	cmp	r3, #0
 8005902:	d041      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005908:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800590c:	d02a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800590e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005912:	d824      	bhi.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005914:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005918:	d008      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800591a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800591e:	d81e      	bhi.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005928:	d010      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800592a:	e018      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800592c:	4b86      	ldr	r3, [pc, #536]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4a85      	ldr	r2, [pc, #532]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005936:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005938:	e015      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3304      	adds	r3, #4
 800593e:	2100      	movs	r1, #0
 8005940:	4618      	mov	r0, r3
 8005942:	f000 facd 	bl	8005ee0 <RCCEx_PLLSAI1_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800594a:	e00c      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3320      	adds	r3, #32
 8005950:	2100      	movs	r1, #0
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fbb6 	bl	80060c4 <RCCEx_PLLSAI2_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800595c:	e003      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	74fb      	strb	r3, [r7, #19]
      break;
 8005962:	e000      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005966:	7cfb      	ldrb	r3, [r7, #19]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10b      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800596c:	4b76      	ldr	r3, [pc, #472]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800597a:	4973      	ldr	r1, [pc, #460]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005982:	e001      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	7cfb      	ldrb	r3, [r7, #19]
 8005986:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d041      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005998:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800599c:	d02a      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800599e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059a2:	d824      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80059a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059a8:	d008      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059ae:	d81e      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80059b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059b8:	d010      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80059ba:	e018      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059bc:	4b62      	ldr	r3, [pc, #392]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4a61      	ldr	r2, [pc, #388]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80059c8:	e015      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3304      	adds	r3, #4
 80059ce:	2100      	movs	r1, #0
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fa85 	bl	8005ee0 <RCCEx_PLLSAI1_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80059da:	e00c      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3320      	adds	r3, #32
 80059e0:	2100      	movs	r1, #0
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fb6e 	bl	80060c4 <RCCEx_PLLSAI2_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80059ec:	e003      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	74fb      	strb	r3, [r7, #19]
      break;
 80059f2:	e000      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80059f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059f6:	7cfb      	ldrb	r3, [r7, #19]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10b      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80059fc:	4b52      	ldr	r3, [pc, #328]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a0a:	494f      	ldr	r1, [pc, #316]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a12:	e001      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a14:	7cfb      	ldrb	r3, [r7, #19]
 8005a16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80a0 	beq.w	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a26:	2300      	movs	r3, #0
 8005a28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a2a:	4b47      	ldr	r3, [pc, #284]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00d      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a40:	4b41      	ldr	r3, [pc, #260]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a44:	4a40      	ldr	r2, [pc, #256]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a4c:	4b3e      	ldr	r3, [pc, #248]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a5c:	4b3b      	ldr	r3, [pc, #236]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a3a      	ldr	r2, [pc, #232]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a68:	f7fb fdf2 	bl	8001650 <HAL_GetTick>
 8005a6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a6e:	e009      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a70:	f7fb fdee 	bl	8001650 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d902      	bls.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	74fb      	strb	r3, [r7, #19]
        break;
 8005a82:	e005      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a84:	4b31      	ldr	r3, [pc, #196]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0ef      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005a90:	7cfb      	ldrb	r3, [r7, #19]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d15c      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a96:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01f      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d019      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ab4:	4b24      	ldr	r3, [pc, #144]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005abe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ac0:	4b21      	ldr	r3, [pc, #132]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac6:	4a20      	ldr	r2, [pc, #128]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ad0:	4b1d      	ldr	r3, [pc, #116]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad6:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ae0:	4a19      	ldr	r2, [pc, #100]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d016      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af2:	f7fb fdad 	bl	8001650 <HAL_GetTick>
 8005af6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005af8:	e00b      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afa:	f7fb fda9 	bl	8001650 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d902      	bls.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	74fb      	strb	r3, [r7, #19]
            break;
 8005b10:	e006      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b12:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ec      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005b20:	7cfb      	ldrb	r3, [r7, #19]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10c      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b26:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b36:	4904      	ldr	r1, [pc, #16]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b3e:	e009      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b40:	7cfb      	ldrb	r3, [r7, #19]
 8005b42:	74bb      	strb	r3, [r7, #18]
 8005b44:	e006      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005b46:	bf00      	nop
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b50:	7cfb      	ldrb	r3, [r7, #19]
 8005b52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b54:	7c7b      	ldrb	r3, [r7, #17]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d105      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b5a:	4ba6      	ldr	r3, [pc, #664]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5e:	4aa5      	ldr	r2, [pc, #660]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b72:	4ba0      	ldr	r3, [pc, #640]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b78:	f023 0203 	bic.w	r2, r3, #3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	499c      	ldr	r1, [pc, #624]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b94:	4b97      	ldr	r3, [pc, #604]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9a:	f023 020c 	bic.w	r2, r3, #12
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba2:	4994      	ldr	r1, [pc, #592]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bb6:	4b8f      	ldr	r3, [pc, #572]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	498b      	ldr	r1, [pc, #556]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bd8:	4b86      	ldr	r3, [pc, #536]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be6:	4983      	ldr	r1, [pc, #524]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005bfa:	4b7e      	ldr	r3, [pc, #504]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c08:	497a      	ldr	r1, [pc, #488]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0320 	and.w	r3, r3, #32
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c1c:	4b75      	ldr	r3, [pc, #468]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2a:	4972      	ldr	r1, [pc, #456]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c3e:	4b6d      	ldr	r3, [pc, #436]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4c:	4969      	ldr	r1, [pc, #420]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c60:	4b64      	ldr	r3, [pc, #400]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c6e:	4961      	ldr	r1, [pc, #388]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c82:	4b5c      	ldr	r3, [pc, #368]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c90:	4958      	ldr	r1, [pc, #352]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ca4:	4b53      	ldr	r3, [pc, #332]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb2:	4950      	ldr	r1, [pc, #320]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cc6:	4b4b      	ldr	r3, [pc, #300]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd4:	4947      	ldr	r1, [pc, #284]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ce8:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cee:	f023 0203 	bic.w	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf6:	493f      	ldr	r1, [pc, #252]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d028      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d0a:	4b3a      	ldr	r3, [pc, #232]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	4936      	ldr	r1, [pc, #216]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d28:	d106      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d2a:	4b32      	ldr	r3, [pc, #200]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	4a31      	ldr	r2, [pc, #196]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d34:	60d3      	str	r3, [r2, #12]
 8005d36:	e011      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d40:	d10c      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3304      	adds	r3, #4
 8005d46:	2101      	movs	r1, #1
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 f8c9 	bl	8005ee0 <RCCEx_PLLSAI1_Config>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005d52:	7cfb      	ldrb	r3, [r7, #19]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d028      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d68:	4b22      	ldr	r3, [pc, #136]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d76:	491f      	ldr	r1, [pc, #124]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d86:	d106      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d88:	4b1a      	ldr	r3, [pc, #104]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	4a19      	ldr	r2, [pc, #100]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d92:	60d3      	str	r3, [r2, #12]
 8005d94:	e011      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d9e:	d10c      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3304      	adds	r3, #4
 8005da4:	2101      	movs	r1, #1
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 f89a 	bl	8005ee0 <RCCEx_PLLSAI1_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005db0:	7cfb      	ldrb	r3, [r7, #19]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005db6:	7cfb      	ldrb	r3, [r7, #19]
 8005db8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d02a      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dd4:	4907      	ldr	r1, [pc, #28]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005de4:	d108      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005de6:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	4a02      	ldr	r2, [pc, #8]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005df0:	60d3      	str	r3, [r2, #12]
 8005df2:	e013      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005df4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3304      	adds	r3, #4
 8005e06:	2101      	movs	r1, #1
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 f869 	bl	8005ee0 <RCCEx_PLLSAI1_Config>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e12:	7cfb      	ldrb	r3, [r7, #19]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005e18:	7cfb      	ldrb	r3, [r7, #19]
 8005e1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d02f      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e28:	4b2c      	ldr	r3, [pc, #176]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e36:	4929      	ldr	r1, [pc, #164]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e46:	d10d      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	2102      	movs	r1, #2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 f846 	bl	8005ee0 <RCCEx_PLLSAI1_Config>
 8005e54:	4603      	mov	r3, r0
 8005e56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e58:	7cfb      	ldrb	r3, [r7, #19]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d014      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005e5e:	7cfb      	ldrb	r3, [r7, #19]
 8005e60:	74bb      	strb	r3, [r7, #18]
 8005e62:	e011      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e6c:	d10c      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3320      	adds	r3, #32
 8005e72:	2102      	movs	r1, #2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 f925 	bl	80060c4 <RCCEx_PLLSAI2_Config>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e7e:	7cfb      	ldrb	r3, [r7, #19]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005e84:	7cfb      	ldrb	r3, [r7, #19]
 8005e86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e94:	4b11      	ldr	r3, [pc, #68]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ea4:	490d      	ldr	r1, [pc, #52]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005eb8:	4b08      	ldr	r3, [pc, #32]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec8:	4904      	ldr	r1, [pc, #16]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ed0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40021000 	.word	0x40021000

08005ee0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005eee:	4b74      	ldr	r3, [pc, #464]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d018      	beq.n	8005f2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005efa:	4b71      	ldr	r3, [pc, #452]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0203 	and.w	r2, r3, #3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d10d      	bne.n	8005f26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
       ||
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d009      	beq.n	8005f26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f12:	4b6b      	ldr	r3, [pc, #428]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	091b      	lsrs	r3, r3, #4
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
       ||
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d047      	beq.n	8005fb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
 8005f2a:	e044      	b.n	8005fb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d018      	beq.n	8005f66 <RCCEx_PLLSAI1_Config+0x86>
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d825      	bhi.n	8005f84 <RCCEx_PLLSAI1_Config+0xa4>
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d002      	beq.n	8005f42 <RCCEx_PLLSAI1_Config+0x62>
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d009      	beq.n	8005f54 <RCCEx_PLLSAI1_Config+0x74>
 8005f40:	e020      	b.n	8005f84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f42:	4b5f      	ldr	r3, [pc, #380]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d11d      	bne.n	8005f8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f52:	e01a      	b.n	8005f8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f54:	4b5a      	ldr	r3, [pc, #360]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d116      	bne.n	8005f8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f64:	e013      	b.n	8005f8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f66:	4b56      	ldr	r3, [pc, #344]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10f      	bne.n	8005f92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f72:	4b53      	ldr	r3, [pc, #332]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d109      	bne.n	8005f92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f82:	e006      	b.n	8005f92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
      break;
 8005f88:	e004      	b.n	8005f94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f8a:	bf00      	nop
 8005f8c:	e002      	b.n	8005f94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f92:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10d      	bne.n	8005fb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f9a:	4b49      	ldr	r3, [pc, #292]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6819      	ldr	r1, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	430b      	orrs	r3, r1
 8005fb0:	4943      	ldr	r1, [pc, #268]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d17c      	bne.n	80060b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005fbc:	4b40      	ldr	r3, [pc, #256]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a3f      	ldr	r2, [pc, #252]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc8:	f7fb fb42 	bl	8001650 <HAL_GetTick>
 8005fcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fce:	e009      	b.n	8005fe4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fd0:	f7fb fb3e 	bl	8001650 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d902      	bls.n	8005fe4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8005fe2:	e005      	b.n	8005ff0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fe4:	4b36      	ldr	r3, [pc, #216]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1ef      	bne.n	8005fd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d15f      	bne.n	80060b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d110      	bne.n	800601e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ffc:	4b30      	ldr	r3, [pc, #192]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006004:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6892      	ldr	r2, [r2, #8]
 800600c:	0211      	lsls	r1, r2, #8
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68d2      	ldr	r2, [r2, #12]
 8006012:	06d2      	lsls	r2, r2, #27
 8006014:	430a      	orrs	r2, r1
 8006016:	492a      	ldr	r1, [pc, #168]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006018:	4313      	orrs	r3, r2
 800601a:	610b      	str	r3, [r1, #16]
 800601c:	e027      	b.n	800606e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d112      	bne.n	800604a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006024:	4b26      	ldr	r3, [pc, #152]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800602c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	6892      	ldr	r2, [r2, #8]
 8006034:	0211      	lsls	r1, r2, #8
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6912      	ldr	r2, [r2, #16]
 800603a:	0852      	lsrs	r2, r2, #1
 800603c:	3a01      	subs	r2, #1
 800603e:	0552      	lsls	r2, r2, #21
 8006040:	430a      	orrs	r2, r1
 8006042:	491f      	ldr	r1, [pc, #124]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006044:	4313      	orrs	r3, r2
 8006046:	610b      	str	r3, [r1, #16]
 8006048:	e011      	b.n	800606e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800604a:	4b1d      	ldr	r3, [pc, #116]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006052:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6892      	ldr	r2, [r2, #8]
 800605a:	0211      	lsls	r1, r2, #8
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6952      	ldr	r2, [r2, #20]
 8006060:	0852      	lsrs	r2, r2, #1
 8006062:	3a01      	subs	r2, #1
 8006064:	0652      	lsls	r2, r2, #25
 8006066:	430a      	orrs	r2, r1
 8006068:	4915      	ldr	r1, [pc, #84]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800606a:	4313      	orrs	r3, r2
 800606c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800606e:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006078:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607a:	f7fb fae9 	bl	8001650 <HAL_GetTick>
 800607e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006080:	e009      	b.n	8006096 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006082:	f7fb fae5 	bl	8001650 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d902      	bls.n	8006096 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	73fb      	strb	r3, [r7, #15]
          break;
 8006094:	e005      	b.n	80060a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006096:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0ef      	beq.n	8006082 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80060a8:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	4903      	ldr	r1, [pc, #12]	; (80060c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000

080060c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060d2:	4b69      	ldr	r3, [pc, #420]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d018      	beq.n	8006110 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80060de:	4b66      	ldr	r3, [pc, #408]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0203 	and.w	r2, r3, #3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d10d      	bne.n	800610a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
       ||
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d009      	beq.n	800610a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80060f6:	4b60      	ldr	r3, [pc, #384]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	091b      	lsrs	r3, r3, #4
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
       ||
 8006106:	429a      	cmp	r2, r3
 8006108:	d047      	beq.n	800619a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	73fb      	strb	r3, [r7, #15]
 800610e:	e044      	b.n	800619a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b03      	cmp	r3, #3
 8006116:	d018      	beq.n	800614a <RCCEx_PLLSAI2_Config+0x86>
 8006118:	2b03      	cmp	r3, #3
 800611a:	d825      	bhi.n	8006168 <RCCEx_PLLSAI2_Config+0xa4>
 800611c:	2b01      	cmp	r3, #1
 800611e:	d002      	beq.n	8006126 <RCCEx_PLLSAI2_Config+0x62>
 8006120:	2b02      	cmp	r3, #2
 8006122:	d009      	beq.n	8006138 <RCCEx_PLLSAI2_Config+0x74>
 8006124:	e020      	b.n	8006168 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006126:	4b54      	ldr	r3, [pc, #336]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d11d      	bne.n	800616e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006136:	e01a      	b.n	800616e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006138:	4b4f      	ldr	r3, [pc, #316]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006140:	2b00      	cmp	r3, #0
 8006142:	d116      	bne.n	8006172 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006148:	e013      	b.n	8006172 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800614a:	4b4b      	ldr	r3, [pc, #300]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10f      	bne.n	8006176 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006156:	4b48      	ldr	r3, [pc, #288]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006166:	e006      	b.n	8006176 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
      break;
 800616c:	e004      	b.n	8006178 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800616e:	bf00      	nop
 8006170:	e002      	b.n	8006178 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006172:	bf00      	nop
 8006174:	e000      	b.n	8006178 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006176:	bf00      	nop
    }

    if(status == HAL_OK)
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10d      	bne.n	800619a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800617e:	4b3e      	ldr	r3, [pc, #248]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6819      	ldr	r1, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	3b01      	subs	r3, #1
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	430b      	orrs	r3, r1
 8006194:	4938      	ldr	r1, [pc, #224]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006196:	4313      	orrs	r3, r2
 8006198:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d166      	bne.n	800626e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80061a0:	4b35      	ldr	r3, [pc, #212]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a34      	ldr	r2, [pc, #208]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ac:	f7fb fa50 	bl	8001650 <HAL_GetTick>
 80061b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061b2:	e009      	b.n	80061c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061b4:	f7fb fa4c 	bl	8001650 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d902      	bls.n	80061c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	73fb      	strb	r3, [r7, #15]
        break;
 80061c6:	e005      	b.n	80061d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061c8:	4b2b      	ldr	r3, [pc, #172]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1ef      	bne.n	80061b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d149      	bne.n	800626e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d110      	bne.n	8006202 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061e0:	4b25      	ldr	r3, [pc, #148]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80061e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6892      	ldr	r2, [r2, #8]
 80061f0:	0211      	lsls	r1, r2, #8
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68d2      	ldr	r2, [r2, #12]
 80061f6:	06d2      	lsls	r2, r2, #27
 80061f8:	430a      	orrs	r2, r1
 80061fa:	491f      	ldr	r1, [pc, #124]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	614b      	str	r3, [r1, #20]
 8006200:	e011      	b.n	8006226 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006202:	4b1d      	ldr	r3, [pc, #116]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800620a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6892      	ldr	r2, [r2, #8]
 8006212:	0211      	lsls	r1, r2, #8
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6912      	ldr	r2, [r2, #16]
 8006218:	0852      	lsrs	r2, r2, #1
 800621a:	3a01      	subs	r2, #1
 800621c:	0652      	lsls	r2, r2, #25
 800621e:	430a      	orrs	r2, r1
 8006220:	4915      	ldr	r1, [pc, #84]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006222:	4313      	orrs	r3, r2
 8006224:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006226:	4b14      	ldr	r3, [pc, #80]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a13      	ldr	r2, [pc, #76]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 800622c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006230:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006232:	f7fb fa0d 	bl	8001650 <HAL_GetTick>
 8006236:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006238:	e009      	b.n	800624e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800623a:	f7fb fa09 	bl	8001650 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d902      	bls.n	800624e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	73fb      	strb	r3, [r7, #15]
          break;
 800624c:	e005      	b.n	800625a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800624e:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ef      	beq.n	800623a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800625a:	7bfb      	ldrb	r3, [r7, #15]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d106      	bne.n	800626e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006260:	4b05      	ldr	r3, [pc, #20]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006262:	695a      	ldr	r2, [r3, #20]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	4903      	ldr	r1, [pc, #12]	; (8006278 <RCCEx_PLLSAI2_Config+0x1b4>)
 800626a:	4313      	orrs	r3, r2
 800626c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800626e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	40021000 	.word	0x40021000

0800627c <__errno>:
 800627c:	4b01      	ldr	r3, [pc, #4]	; (8006284 <__errno+0x8>)
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	2000000c 	.word	0x2000000c

08006288 <__libc_init_array>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	4d0d      	ldr	r5, [pc, #52]	; (80062c0 <__libc_init_array+0x38>)
 800628c:	4c0d      	ldr	r4, [pc, #52]	; (80062c4 <__libc_init_array+0x3c>)
 800628e:	1b64      	subs	r4, r4, r5
 8006290:	10a4      	asrs	r4, r4, #2
 8006292:	2600      	movs	r6, #0
 8006294:	42a6      	cmp	r6, r4
 8006296:	d109      	bne.n	80062ac <__libc_init_array+0x24>
 8006298:	4d0b      	ldr	r5, [pc, #44]	; (80062c8 <__libc_init_array+0x40>)
 800629a:	4c0c      	ldr	r4, [pc, #48]	; (80062cc <__libc_init_array+0x44>)
 800629c:	f000 f8a0 	bl	80063e0 <_init>
 80062a0:	1b64      	subs	r4, r4, r5
 80062a2:	10a4      	asrs	r4, r4, #2
 80062a4:	2600      	movs	r6, #0
 80062a6:	42a6      	cmp	r6, r4
 80062a8:	d105      	bne.n	80062b6 <__libc_init_array+0x2e>
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
 80062ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b0:	4798      	blx	r3
 80062b2:	3601      	adds	r6, #1
 80062b4:	e7ee      	b.n	8006294 <__libc_init_array+0xc>
 80062b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ba:	4798      	blx	r3
 80062bc:	3601      	adds	r6, #1
 80062be:	e7f2      	b.n	80062a6 <__libc_init_array+0x1e>
 80062c0:	08006988 	.word	0x08006988
 80062c4:	08006988 	.word	0x08006988
 80062c8:	08006988 	.word	0x08006988
 80062cc:	0800698c 	.word	0x0800698c

080062d0 <malloc>:
 80062d0:	4b02      	ldr	r3, [pc, #8]	; (80062dc <malloc+0xc>)
 80062d2:	4601      	mov	r1, r0
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	f000 b80b 	b.w	80062f0 <_malloc_r>
 80062da:	bf00      	nop
 80062dc:	2000000c 	.word	0x2000000c

080062e0 <memset>:
 80062e0:	4402      	add	r2, r0
 80062e2:	4603      	mov	r3, r0
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d100      	bne.n	80062ea <memset+0xa>
 80062e8:	4770      	bx	lr
 80062ea:	f803 1b01 	strb.w	r1, [r3], #1
 80062ee:	e7f9      	b.n	80062e4 <memset+0x4>

080062f0 <_malloc_r>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	1ccd      	adds	r5, r1, #3
 80062f4:	f025 0503 	bic.w	r5, r5, #3
 80062f8:	3508      	adds	r5, #8
 80062fa:	2d0c      	cmp	r5, #12
 80062fc:	bf38      	it	cc
 80062fe:	250c      	movcc	r5, #12
 8006300:	2d00      	cmp	r5, #0
 8006302:	4606      	mov	r6, r0
 8006304:	db01      	blt.n	800630a <_malloc_r+0x1a>
 8006306:	42a9      	cmp	r1, r5
 8006308:	d903      	bls.n	8006312 <_malloc_r+0x22>
 800630a:	230c      	movs	r3, #12
 800630c:	6033      	str	r3, [r6, #0]
 800630e:	2000      	movs	r0, #0
 8006310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006312:	f000 f857 	bl	80063c4 <__malloc_lock>
 8006316:	4921      	ldr	r1, [pc, #132]	; (800639c <_malloc_r+0xac>)
 8006318:	680a      	ldr	r2, [r1, #0]
 800631a:	4614      	mov	r4, r2
 800631c:	b99c      	cbnz	r4, 8006346 <_malloc_r+0x56>
 800631e:	4f20      	ldr	r7, [pc, #128]	; (80063a0 <_malloc_r+0xb0>)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	b923      	cbnz	r3, 800632e <_malloc_r+0x3e>
 8006324:	4621      	mov	r1, r4
 8006326:	4630      	mov	r0, r6
 8006328:	f000 f83c 	bl	80063a4 <_sbrk_r>
 800632c:	6038      	str	r0, [r7, #0]
 800632e:	4629      	mov	r1, r5
 8006330:	4630      	mov	r0, r6
 8006332:	f000 f837 	bl	80063a4 <_sbrk_r>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	d123      	bne.n	8006382 <_malloc_r+0x92>
 800633a:	230c      	movs	r3, #12
 800633c:	6033      	str	r3, [r6, #0]
 800633e:	4630      	mov	r0, r6
 8006340:	f000 f846 	bl	80063d0 <__malloc_unlock>
 8006344:	e7e3      	b.n	800630e <_malloc_r+0x1e>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	1b5b      	subs	r3, r3, r5
 800634a:	d417      	bmi.n	800637c <_malloc_r+0x8c>
 800634c:	2b0b      	cmp	r3, #11
 800634e:	d903      	bls.n	8006358 <_malloc_r+0x68>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	441c      	add	r4, r3
 8006354:	6025      	str	r5, [r4, #0]
 8006356:	e004      	b.n	8006362 <_malloc_r+0x72>
 8006358:	6863      	ldr	r3, [r4, #4]
 800635a:	42a2      	cmp	r2, r4
 800635c:	bf0c      	ite	eq
 800635e:	600b      	streq	r3, [r1, #0]
 8006360:	6053      	strne	r3, [r2, #4]
 8006362:	4630      	mov	r0, r6
 8006364:	f000 f834 	bl	80063d0 <__malloc_unlock>
 8006368:	f104 000b 	add.w	r0, r4, #11
 800636c:	1d23      	adds	r3, r4, #4
 800636e:	f020 0007 	bic.w	r0, r0, #7
 8006372:	1ac2      	subs	r2, r0, r3
 8006374:	d0cc      	beq.n	8006310 <_malloc_r+0x20>
 8006376:	1a1b      	subs	r3, r3, r0
 8006378:	50a3      	str	r3, [r4, r2]
 800637a:	e7c9      	b.n	8006310 <_malloc_r+0x20>
 800637c:	4622      	mov	r2, r4
 800637e:	6864      	ldr	r4, [r4, #4]
 8006380:	e7cc      	b.n	800631c <_malloc_r+0x2c>
 8006382:	1cc4      	adds	r4, r0, #3
 8006384:	f024 0403 	bic.w	r4, r4, #3
 8006388:	42a0      	cmp	r0, r4
 800638a:	d0e3      	beq.n	8006354 <_malloc_r+0x64>
 800638c:	1a21      	subs	r1, r4, r0
 800638e:	4630      	mov	r0, r6
 8006390:	f000 f808 	bl	80063a4 <_sbrk_r>
 8006394:	3001      	adds	r0, #1
 8006396:	d1dd      	bne.n	8006354 <_malloc_r+0x64>
 8006398:	e7cf      	b.n	800633a <_malloc_r+0x4a>
 800639a:	bf00      	nop
 800639c:	20000098 	.word	0x20000098
 80063a0:	2000009c 	.word	0x2000009c

080063a4 <_sbrk_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4d06      	ldr	r5, [pc, #24]	; (80063c0 <_sbrk_r+0x1c>)
 80063a8:	2300      	movs	r3, #0
 80063aa:	4604      	mov	r4, r0
 80063ac:	4608      	mov	r0, r1
 80063ae:	602b      	str	r3, [r5, #0]
 80063b0:	f7fb f854 	bl	800145c <_sbrk>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_sbrk_r+0x1a>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_sbrk_r+0x1a>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	200001a0 	.word	0x200001a0

080063c4 <__malloc_lock>:
 80063c4:	4801      	ldr	r0, [pc, #4]	; (80063cc <__malloc_lock+0x8>)
 80063c6:	f000 b809 	b.w	80063dc <__retarget_lock_acquire_recursive>
 80063ca:	bf00      	nop
 80063cc:	200001a8 	.word	0x200001a8

080063d0 <__malloc_unlock>:
 80063d0:	4801      	ldr	r0, [pc, #4]	; (80063d8 <__malloc_unlock+0x8>)
 80063d2:	f000 b804 	b.w	80063de <__retarget_lock_release_recursive>
 80063d6:	bf00      	nop
 80063d8:	200001a8 	.word	0x200001a8

080063dc <__retarget_lock_acquire_recursive>:
 80063dc:	4770      	bx	lr

080063de <__retarget_lock_release_recursive>:
 80063de:	4770      	bx	lr

080063e0 <_init>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	bf00      	nop
 80063e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e6:	bc08      	pop	{r3}
 80063e8:	469e      	mov	lr, r3
 80063ea:	4770      	bx	lr

080063ec <_fini>:
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ee:	bf00      	nop
 80063f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f2:	bc08      	pop	{r3}
 80063f4:	469e      	mov	lr, r3
 80063f6:	4770      	bx	lr
